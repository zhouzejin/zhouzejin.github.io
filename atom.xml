<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Zhou Zejin&#39;s Home</title>
  
  <subtitle>想象力比知识更重要！</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-01-11T11:47:09.322Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Zhou Zejin</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Paint使用</title>
    <link href="http://yoursite.com/2018/01/11/Paint%E4%BD%BF%E7%94%A8/"/>
    <id>http://yoursite.com/2018/01/11/Paint使用/</id>
    <published>2018-01-11T11:09:35.000Z</published>
    <updated>2018-01-11T11:47:09.322Z</updated>
    
    <content type="html"><![CDATA[<p>在<a href="/2018/01/02/2D绘图/">2D绘图</a>中可以了解到Paint的基本使用，使用这些基本方法可以实现一般的绘制需求，如果要实现更加丰富的绘图效果，需要了解Paint的更详细使用。</p><p>Paint的方法按功能可以分为四类：颜色处理、绘制效果、文字绘制和初始化相关。</p><h1 id="颜色处理"><a href="#颜色处理" class="headerlink" title="颜色处理"></a>颜色处理</h1><p>颜色处理有三个层次：直接使用设置颜色的API给图形和文字设置颜色；使用setColorFilter()基于颜色进行过滤处理；使用setXfermode()处理源图像和Canvas已有内容的关系。</p><h2 id="颜色设置"><a href="#颜色设置" class="headerlink" title="颜色设置"></a>颜色设置</h2><p>Paint设置颜色的方法有两种：一种是直接用Paint.setColor/ARGB()来设置颜色，另一种是使用Shader来指定着色方案。</p><h3 id="直接设置颜色"><a href="#直接设置颜色" class="headerlink" title="直接设置颜色"></a>直接设置颜色</h3><ul><li>setColor(int color)</li><li>setARGB(int a, int r, int g, int b)</li></ul><h3 id="使用Shader"><a href="#使用Shader" class="headerlink" title="使用Shader"></a>使用Shader</h3><p>通过setShader(Shader shader)设置Shader后，Paint 在绘制图形和文字时就不使用setColor/ARGB()设置的颜色了，而是使用Shader中的颜色方案。系统提供的Shader有以下几类：</p><ul><li>LinearGradient 线性渐变</li><li>RadialGradient 辐射渐变</li><li>BitmapShader 用Bitmap的像素来作为图形或文字的填充</li></ul><p>上面三种Shader都有3种着色规则（TileMode）：CLAMP会在端点之外延续端点处的颜色；MIRROR是镜像模式；REPEAT是重复模式。</p><ul><li>SweepGradient 扫描渐变</li><li>ComposeShader 混合着色器，把两个Shader叠加使用<br>叠加使用时，需要用到叠加模式，它的类型是PorterDuff.Mode，决定shaderA和shaderB应该怎样共同绘制。</li></ul><h2 id="设置滤色器"><a href="#设置滤色器" class="headerlink" title="设置滤色器"></a>设置滤色器</h2><p>通过setColorFilter(ColorFilter colorFilter)设置滤色器，系统提供的ColorFilter有以下几类：</p><ul><li><p>LightingColorFilter<br>模拟简单的光照效果。</p></li><li><p>PorterDuffColorFilter<br>使用一个指定的颜色和一种指定的PorterDuff.Mode来与绘制对象进行合成。</p></li><li><p>ColorMatrixColorFilter<br>使用一个ColorMatrix来对颜色进行处理，具体使用可以查看<a href="/2018/01/02/图像特效/">图像特效</a>中的颜色特效。</p></li></ul><h2 id="设置TransferMode"><a href="#设置TransferMode" class="headerlink" title="设置TransferMode"></a>设置TransferMode</h2><p>通过setXfermode(Xfermode xfermode)设置TransferMode，”Xfermode”是”Transfer mode”的简写，指的是要绘制的内容和Canvas目标位置的内容进行颜色结合的模式，简单来说，就是以要绘制的内容作为源图像，以Canvas中已有的内容作为目标图像，选取一个PorterDuff.Mode作为绘制内容的颜色处理方案。</p><p>创建Xfermode的时候其实是创建的它的子类PorterDuffXfermode，而事实上，Xfermode只有这一个子类。</p><h1 id="绘制效果"><a href="#绘制效果" class="headerlink" title="绘制效果"></a>绘制效果</h1><p>绘制效果指的就是抗锯齿、填充/轮廓、线条宽度等等这些。</p><h2 id="抗锯齿"><a href="#抗锯齿" class="headerlink" title="抗锯齿"></a>抗锯齿</h2><p>使用setAntiAlias (boolean b)设置是否抗锯齿。</p><h2 id="绘制风格"><a href="#绘制风格" class="headerlink" title="绘制风格"></a>绘制风格</h2><p>使用setStyle(Paint.Style style)设置图形是线条风格还是填充风格的（或者二者并用）。</p><h2 id="线条形状"><a href="#线条形状" class="headerlink" title="线条形状"></a>线条形状</h2><ul><li><p>setStrokeWidth(float width)<br>设置线条宽度。单位为像素，默认值是 0。</p></li><li><p>setStrokeCap(Paint.Cap cap)<br>设置线头的形状。线头形状有三种：BUTT平头、ROUND圆头、SQUARE方头。默认为BUTT。</p></li><li><p>setStrokeJoin(Paint.Join join)<br>设置拐角的形状。有三个值可以选择：MITER尖角、 BEVEL平角和ROUND 圆角。默认为MITER。</p></li><li><p>setStrokeMiter(float miter)<br>这个方法是对于setStrokeJoin()的一个补充，它用于设置MITER型拐角的延长线的最大值，所谓“延长线的最大值”。</p></li></ul><h2 id="色彩优化"><a href="#色彩优化" class="headerlink" title="色彩优化"></a>色彩优化</h2><ul><li><p>setDither(boolean dither)<br>设置图像的抖动。</p></li><li><p>setFilterBitmap(boolean filter)<br>设置是否使用双线性过滤来绘制Bitmap。图像在放大绘制的时候，默认使用的是最近邻插值过滤，这种算法简单，但会出现马赛克现象；而如果开启了双线性过滤，就可以让结果图像显得更加平滑。</p></li></ul><h2 id="PathEffect"><a href="#PathEffect" class="headerlink" title="PathEffect"></a>PathEffect</h2><p>通过setPathEffect(PathEffect effect)给图形的轮廓设置效果，对Canvas所有的图形绘制有效，即对 drawLine() drawCircle() drawPath() 这些方法有效。</p><p>单一效果的PathEffect有：</p><ul><li><p>CornerPathEffect<br>把所有拐角变成圆角。</p></li><li><p>DiscretePathEffect<br>把线条进行随机的偏离，让轮廓变得乱七八糟。</p></li><li><p>DashPathEffect<br>使用虚线来绘制线条。</p></li><li><p>PathDashPathEffect<br>比DashPathEffect多一个前缀Path，顾名思义，它是使用一个Path来绘制“虚线”。</p></li></ul><p>组合效果类的PathEffect有：</p><ul><li><p>SumPathEffect<br>按照两种PathEffect分别对目标进行绘制。</p></li><li><p>ComposePathEffect<br>先对目标Path使用一个PathEffect，然后再对这个改变后的Path使用另一个PathEffect。</p></li></ul><h2 id="添加阴影"><a href="#添加阴影" class="headerlink" title="添加阴影"></a>添加阴影</h2><p>具体使用setShadowLayer(float radius, float dx, float dy, int shadowColor)方法。radius是阴影的模糊范围；dx dy是阴影的偏移量；shadowColor是阴影的颜色。</p><p>如果要清除阴影层，使用clearShadowLayer()方法。</p><h2 id="MaskFilter"><a href="#MaskFilter" class="headerlink" title="MaskFilter"></a>MaskFilter</h2><p>setShadowLayer()设置的是绘制层下方的附加效果；而MaskFilter和它相反，setMaskFilter(filter)设置的是绘制层上方的附加效果。</p><p>前面有一个setColorFilter(filter)方法，它对每个像素的颜色进行过滤；而setMaskFilter(filter)是基于整个画面来进行过滤。</p><ul><li>BlurMaskFilter 模糊效果</li><li>EmbossMaskFilter 浮雕效果</li></ul><h2 id="获取绘制的Path"><a href="#获取绘制的Path" class="headerlink" title="获取绘制的Path"></a>获取绘制的Path</h2><p>根据Paint的设置，计算出绘制Path或文字时的<strong>实际Path</strong>，所谓实际Path，指的就是drawPath()绘制内容的轮廓，要算上线条宽度和设置的PathEffect。</p><ul><li><p>getFillPath(Path src, Path dst)<br>src是原Path，而dst就是实际Path的保存位置。</p></li><li><p>getTextPath()<br>获取的就是目标文字所对应的Path。</p></li></ul><p>获取绘制的Path主要是用于图形和文字的装饰效果的位置计算，比如<a href="https://medium.com/google-developers/a-better-underline-for-android-90ba3a2e4fb" target="_blank" rel="noopener">自定义的下划线效果</a>。</p><h1 id="文字绘制"><a href="#文字绘制" class="headerlink" title="文字绘制"></a>文字绘制</h1><p>Paint有很多文字绘制相关的方法，即和drawText()相关的方法，这些方法可以设置文字大小、文字间隔、文字效果等。除此之外，Paint还有很多与文字绘制相关的设置或计算的方法，具体可以参考官方文档。</p><h1 id="初始化相关"><a href="#初始化相关" class="headerlink" title="初始化相关"></a>初始化相关</h1><p>这一类方法很简单，它们是用来初始化Paint对象，或者是批量设置Paint的多个属性的方法。</p><ul><li><p>reset()<br>重置Paint的所有属性为默认值。相当于重新new一个，不过性能相对要高。</p></li><li><p>set(Paint src)<br>把src的所有属性全部复制过来。相当于调用src所有的get方法，然后调用这个Paint的对应的set方法来设置它们。</p></li><li><p>setFlags(int flags)<br>批量设置flags。相当于依次调用它们的set方法。</p></li></ul><blockquote><p>这里只是简单介绍了Paint提供的绘制功能，详细介绍可以参考HenCoder的<a href="http://hencoder.com/ui-1-2/" target="_blank" rel="noopener">Paint详解</a>。</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在&lt;a href=&quot;/2018/01/02/2D绘图/&quot;&gt;2D绘图&lt;/a&gt;中可以了解到Paint的基本使用，使用这些基本方法可以实现一般的绘制需求，如果要实现更加丰富的绘图效果，需要了解Paint的更详细使用。&lt;/p&gt;
&lt;p&gt;Paint的方法按功能可以分为四类：颜色处理、绘
      
    
    </summary>
    
      <category term="Android" scheme="http://yoursite.com/categories/Android/"/>
    
    
      <category term="绘图处理" scheme="http://yoursite.com/tags/%E7%BB%98%E5%9B%BE%E5%A4%84%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>图像特效</title>
    <link href="http://yoursite.com/2018/01/02/%E5%9B%BE%E5%83%8F%E7%89%B9%E6%95%88/"/>
    <id>http://yoursite.com/2018/01/02/图像特效/</id>
    <published>2018-01-02T11:58:44.000Z</published>
    <updated>2018-01-11T11:03:55.505Z</updated>
    
    <content type="html"><![CDATA[<p>图像特效按照处理对象一般可以分为颜色特效和图形特效两类，下面分别进行介绍。</p><h1 id="颜色特效"><a href="#颜色特效" class="headerlink" title="颜色特效"></a>颜色特效</h1><p>在Android系统中，通常使用Bitmap（位图）的数据结构来表示一张图片，它包含了图片的所有数据。Bitmap由点阵和颜色值组成，点阵是图片像素的矩阵，其中每个元素对应图片的一个像素；颜色值（ARGB）分别对应透明度、红、绿、蓝四个分量，它们共同决定每个像素点的颜色。</p><p>进行颜色处理时，通常使用以下三个角度来描述一个图像：</p><ul><li>色调——物体的颜色</li><li>饱和度——颜色的纯度，从0（灰）到100%（饱和）进行描述</li><li>亮度——颜色的明暗程度</li></ul><h2 id="颜色矩阵——ColorMatrix"><a href="#颜色矩阵——ColorMatrix" class="headerlink" title="颜色矩阵——ColorMatrix"></a>颜色矩阵——ColorMatrix</h2><p>Android中使用颜色矩阵（ColorMatrix）处理图像的颜色效果，ColorMatrix是一个4x5的矩阵，对于图像的每个像素点，都有一个4x1的颜色分量矩阵保存颜色的RGBA值。</p><p>具体对图像的颜色进行处理时，会通过一定的算法得到一个对应效果的ColorMatrix，接着把这个矩阵分别与每个像素点的颜色分量矩阵进行乘法运算得到新的颜色分量矩阵，最后为每个像素点设置新的颜色分量矩阵，从而达到颜色特效的处理效果，具体过程如下所示：</p><p><img src="/uploads/android/颜色矩阵处理过程.gif" alt="颜色矩阵处理过程"></p><p>根据上述过程，可以得到：</p><p><img src="/uploads/android/颜色处理结果.gif" alt="颜色处理结果"></p><p>根据处理结果可以知道，在4x5的ColorMatrix中：</p><ul><li>第一行r1 g1 b1 a1 o1的值决定新颜色值中的R（红色）</li><li>第二行r2 g2 b2 a2 o2的值决定新颜色值中的G（绿色）</li><li>第三行r3 g3 b3 a3 o3的值决定新颜色值中的B（蓝色）</li><li>第四行r4 g4 b4 a4 o4的值决定新颜色值中的A（透明度）</li><li>第五列o1 o2 o3 o4的值决定新颜色值中每个分量的偏移量（offset）</li></ul><p>因此，对图像的颜色进行处理时，通常有两种方法：一个是改变颜色的offset；另一个是改变对应RGBA值的系数。</p><h2 id="通过颜色矩阵进行颜色处理"><a href="#通过颜色矩阵进行颜色处理" class="headerlink" title="通过颜色矩阵进行颜色处理"></a>通过颜色矩阵进行颜色处理</h2><p>改变ColorMatrix方式通常有两种：一种是通过系统API修改；另一种是利用经典算法直接创建。</p><h3 id="通过系统API修改"><a href="#通过系统API修改" class="headerlink" title="通过系统API修改"></a>通过系统API修改</h3><p>通过系统API修改颜色矩阵可以改变图像的色调、饱和度和亮度。</p><ul><li><p>色调<br>使用setRotate(int axis, float degrees)方法设置颜色矩阵的色调。axis使用0，1，2来表示Red、Green、Blue三种颜色的处理；degrees表示处理的具体值。</p></li><li><p>饱和度<br>使用setSaturation(float sat)方法设置颜色矩阵的饱和度。当饱和度为0时，图像会变为灰色。</p></li><li><p>亮度<br>使用setScale(float rScale, float gScale, float bScale, float aScale)方法设置颜色矩阵的亮度。其本质是利用三原色以同比例混合会显示出白色的原理。当亮度为0时，图像会变为黑色。</p></li></ul><ul><li>效果叠加<br>除了上面三种处理方法外，还可以使用postConcat()方法将不同效果的矩阵进行混合，从而产生叠加效果。</li></ul><p>下面的示例代码展示了如何使用上面介绍的方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Bitmap <span class="title">handleImageEffect</span><span class="params">(Bitmap bm, <span class="keyword">float</span> hue, </span></span></span><br><span class="line"><span class="function"><span class="params">                                       <span class="keyword">float</span> saturation, <span class="keyword">float</span> lum)</span> </span>&#123;</span><br><span class="line">    Bitmap bitmap = Bitmap.createBitmap(bm.getWidth(), bm.getHeight(),</span><br><span class="line">            Bitmap.Config.ARGB_8888);</span><br><span class="line">    Canvas canvas = <span class="keyword">new</span> Canvas(bitmap);</span><br><span class="line">    Paint paint = <span class="keyword">new</span> Paint();</span><br><span class="line"></span><br><span class="line">    ColorMatrix hueMatrix = <span class="keyword">new</span> ColorMatrix();</span><br><span class="line">    hueMatrix.setRotate(<span class="number">0</span>, hue);</span><br><span class="line">    hueMatrix.setRotate(<span class="number">1</span>, hue);</span><br><span class="line">    hueMatrix.setRotate(<span class="number">2</span>, hue);</span><br><span class="line"></span><br><span class="line">    ColorMatrix saturationMatrix = <span class="keyword">new</span> ColorMatrix();</span><br><span class="line">    saturationMatrix.setSaturation(saturation);</span><br><span class="line"></span><br><span class="line">    ColorMatrix lumMatrix = <span class="keyword">new</span> ColorMatrix();</span><br><span class="line">    lumMatrix.setScale(lum, lum, lum, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    ColorMatrix imageMatrix = <span class="keyword">new</span> ColorMatrix();</span><br><span class="line">    imageMatrix.postConcat(hueMatrix);</span><br><span class="line">    imageMatrix.postConcat(saturationMatrix);</span><br><span class="line">    imageMatrix.postConcat(lumMatrix);</span><br><span class="line"></span><br><span class="line">    paint.setColorFilter(<span class="keyword">new</span> ColorMatrixColorFilter(imageMatrix));</span><br><span class="line">    canvas.drawBitmap(bm, <span class="number">0</span>, <span class="number">0</span>, paint);</span><br><span class="line">    <span class="keyword">return</span> bitmap;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="利用经典算法创建"><a href="#利用经典算法创建" class="headerlink" title="利用经典算法创建"></a>利用经典算法创建</h3><p>图像色彩处理，通常就是研究如何通过某种算法创建颜色矩阵，将其作用到图像上，形成新的色彩风格的图像。下面介绍一些经典算法对应的颜色矩阵。</p><ul><li>灰度效果</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 灰度效果</span></span><br><span class="line"><span class="keyword">float</span>[] colorMatrix = <span class="keyword">new</span> <span class="keyword">float</span>[] &#123;</span><br><span class="line">        <span class="number">0.33f</span>,  <span class="number">0.59f</span>,  <span class="number">0.11f</span>,  <span class="number">0</span>,  <span class="number">0</span>,</span><br><span class="line">        <span class="number">0.33f</span>,  <span class="number">0.59f</span>,  <span class="number">0.11f</span>,  <span class="number">0</span>,  <span class="number">0</span>,</span><br><span class="line">        <span class="number">0.33f</span>,  <span class="number">0.59f</span>,  <span class="number">0.11f</span>,  <span class="number">0</span>,  <span class="number">0</span>,</span><br><span class="line">        <span class="number">0</span>,      <span class="number">0</span>,      <span class="number">0</span>,      <span class="number">1</span>,  <span class="number">0</span>,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li>图像反转</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 图像反转</span></span><br><span class="line"><span class="keyword">float</span>[] colorMatrix = <span class="keyword">new</span> <span class="keyword">float</span>[] &#123;</span><br><span class="line">        -<span class="number">1</span>, <span class="number">0</span>,  <span class="number">0</span>,  <span class="number">1</span>,  <span class="number">1</span>,</span><br><span class="line">        <span class="number">0</span>,  -<span class="number">1</span>, <span class="number">0</span>,  <span class="number">1</span>,  <span class="number">1</span>,</span><br><span class="line">        <span class="number">0</span>,  <span class="number">0</span>,  -<span class="number">1</span>, <span class="number">1</span>,  <span class="number">1</span>,</span><br><span class="line">        <span class="number">0</span>,  <span class="number">0</span>,  <span class="number">0</span>,  <span class="number">1</span>,  <span class="number">0</span>,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li>怀旧效果</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 怀旧效果</span></span><br><span class="line"><span class="keyword">float</span>[] colorMatrix = <span class="keyword">new</span> <span class="keyword">float</span>[] &#123;</span><br><span class="line">        <span class="number">0.393f</span>, <span class="number">0.769f</span>, <span class="number">0.189f</span>, <span class="number">0</span>,  <span class="number">0</span>,</span><br><span class="line">        <span class="number">0.349f</span>, <span class="number">0.686f</span>, <span class="number">0.168f</span>, <span class="number">0</span>,  <span class="number">0</span>,</span><br><span class="line">        <span class="number">0.272f</span>, <span class="number">0.534f</span>, <span class="number">0.131f</span>, <span class="number">0</span>,  <span class="number">0</span>,</span><br><span class="line">        <span class="number">0</span>,      <span class="number">0</span>,      <span class="number">0</span>,      <span class="number">1</span>,  <span class="number">0</span>,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li>去色效果</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 去色效果</span></span><br><span class="line"><span class="keyword">float</span>[] colorMatrix = <span class="keyword">new</span> <span class="keyword">float</span>[] &#123;</span><br><span class="line">        <span class="number">1.5f</span>,   <span class="number">1.5f</span>,   <span class="number">1.5f</span>,   <span class="number">0</span>,  -<span class="number">1</span>,</span><br><span class="line">        <span class="number">1.5f</span>,   <span class="number">1.5f</span>,   <span class="number">1.5f</span>,   <span class="number">0</span>,  -<span class="number">1</span>,</span><br><span class="line">        <span class="number">1.5f</span>,   <span class="number">1.5f</span>,   <span class="number">1.5f</span>,   <span class="number">0</span>,  -<span class="number">1</span>,</span><br><span class="line">        <span class="number">0</span>,      <span class="number">0</span>,      <span class="number">0</span>,      <span class="number">1</span>,   <span class="number">0</span>,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li>高饱和度</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 高饱和度</span></span><br><span class="line"><span class="keyword">float</span>[] colorMatrix = <span class="keyword">new</span> <span class="keyword">float</span>[] &#123;</span><br><span class="line">        <span class="number">1.438f</span>,     -<span class="number">0.122f</span>,    -<span class="number">0.016f</span>,    <span class="number">0</span>,  -<span class="number">0.03f</span>,</span><br><span class="line">        -<span class="number">0.062f</span>,    <span class="number">1.378f</span>,     -<span class="number">0.016f</span>,    <span class="number">0</span>,  <span class="number">0.05f</span>,</span><br><span class="line">        -<span class="number">0.062f</span>,    -<span class="number">0.122f</span>,    <span class="number">1.483f</span>,     <span class="number">0</span>,  -<span class="number">0.02f</span>,</span><br><span class="line">        <span class="number">0</span>,          <span class="number">0</span>,          <span class="number">0</span>,          <span class="number">1</span>,  <span class="number">0</span>,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="像素点分析"><a href="#像素点分析" class="headerlink" title="像素点分析"></a>像素点分析</h2><p>除了通过ColorMatrix改变图像的颜色，还可以直接改变每个像素点的ARGB值来改变图像的颜色，这种处理方式相对更加精确。用这种方式处理图片时，需要注意原始图片是不可变的（mutable），需要复制原始图片进行处理。</p><p>Android中使用Bitmap.getPixels(int[] pixels, int offset, int stride,int x, int y, int width, int height)方法获取图片的像素点的颜色值：</p><ul><li>pixels: 接收位图像素点颜色值的数组</li><li>offset: 写入到pixels[]中的第一个像素索引值</li><li>stride: pixels[]的行间距</li><li>x: 从bitmap中读取的第一个像素的x坐标值</li><li>y: 从bitmap中读取的第一个像素的y坐标值</li><li>width: 每行的像素个数</li><li>height: 读取的行数</li></ul><p>修改图像像素点的颜色值的关键代码如下所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取图片像素点的颜色值数组</span></span><br><span class="line">bitmap.getPixels(oldPx, <span class="number">0</span>, bitmap.getWidth(),</span><br><span class="line">        <span class="number">0</span>, <span class="number">0</span>, bitmap.getWidth(), bitmap.getHeight());</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取每个像素点具体的ARGB值</span></span><br><span class="line"><span class="keyword">int</span> color = oldPx[i];</span><br><span class="line">a = Color.alpha(color);</span><br><span class="line">r = Color.red(color);</span><br><span class="line">g = Color.green(color);</span><br><span class="line">b = Color.blue(color);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 根据图像处理算法修改像素点的ARGB值</span></span><br><span class="line">rn = (<span class="keyword">int</span>) (<span class="number">0.393</span> * r + <span class="number">0.322</span> * g + <span class="number">0.189</span> * b);</span><br><span class="line">gn = (<span class="keyword">int</span>) (<span class="number">0.393</span> * r + <span class="number">0.322</span> * g + <span class="number">0.189</span> * b);</span><br><span class="line">bn = (<span class="keyword">int</span>) (<span class="number">0.393</span> * r + <span class="number">0.322</span> * g + <span class="number">0.189</span> * b);</span><br><span class="line">newPx[i] = Color.argb(a, rn, gn, bn);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将修改后的颜色数组设置到位图上，完成颜色处理</span></span><br><span class="line">bitmap.setPixels(newPx, <span class="number">0</span>, bitmap.getWidth(),</span><br><span class="line">        <span class="number">0</span>, <span class="number">0</span>, bitmap.getWidth(), bitmap.getHeight());</span><br></pre></td></tr></table></figure><h2 id="通过像素点进行颜色处理"><a href="#通过像素点进行颜色处理" class="headerlink" title="通过像素点进行颜色处理"></a>通过像素点进行颜色处理</h2><p>通过Pixels进行颜色处理，就是通过特定的算法改变每个像素点的颜色值，从而得到相应的处理效果。下面介绍一些常用的处理算法。</p><ul><li>底片效果</li></ul><p>处理算法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">r = <span class="number">255</span> - r;</span><br><span class="line">g = <span class="number">255</span> - g;</span><br><span class="line">b = <span class="number">255</span> - b;</span><br></pre></td></tr></table></figure><p>示例代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Bitmap <span class="title">handleImagePixels</span><span class="params">(Bitmap bitmap)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> width = bitmap.getWidth();</span><br><span class="line">    <span class="keyword">int</span> height = bitmap.getHeight();</span><br><span class="line">    <span class="keyword">int</span> color;</span><br><span class="line">    <span class="keyword">int</span> a, r, g, b;</span><br><span class="line"></span><br><span class="line">    Bitmap bmp = Bitmap.createBitmap(width, height, Bitmap.Config.ARGB_8888);</span><br><span class="line">    <span class="keyword">int</span>[] oldPx = <span class="keyword">new</span> <span class="keyword">int</span>[width * height];</span><br><span class="line">    <span class="keyword">int</span>[] newPx = <span class="keyword">new</span> <span class="keyword">int</span>[width * height];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取图片像素点的颜色值数组</span></span><br><span class="line">    bitmap.getPixels(oldPx, <span class="number">0</span>, width, <span class="number">0</span>, <span class="number">0</span>, width, height);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; width * height; i++) &#123;</span><br><span class="line">        <span class="comment">// 获取每个像素点具体的ARGB值</span></span><br><span class="line">        color = oldPx[i];</span><br><span class="line">        a = Color.alpha(color);</span><br><span class="line">        r = Color.red(color);</span><br><span class="line">        g = Color.green(color);</span><br><span class="line">        b = Color.blue(color);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 根据图像处理算法修改像素点的ARGB值</span></span><br><span class="line">        r = <span class="number">255</span> - r;</span><br><span class="line">        g = <span class="number">255</span> - g;</span><br><span class="line">        b = <span class="number">255</span> - b;</span><br><span class="line">        <span class="keyword">if</span> (r &gt; <span class="number">255</span>) r = <span class="number">255</span>;</span><br><span class="line">        <span class="keyword">if</span> (r &lt; <span class="number">0</span>) r = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (g &gt; <span class="number">255</span>) g = <span class="number">255</span>;</span><br><span class="line">        <span class="keyword">if</span> (g &lt; <span class="number">0</span>) g = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (b &gt; <span class="number">255</span>) b = <span class="number">255</span>;</span><br><span class="line">        <span class="keyword">if</span> (b &lt; <span class="number">0</span>) b = <span class="number">0</span>;</span><br><span class="line">        newPx[i] = Color.argb(a, r, g, b);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将修改后的颜色数组设置到位图上，完成颜色处理</span></span><br><span class="line">    bmp.setPixels(newPx, <span class="number">0</span>, width, <span class="number">0</span>, <span class="number">0</span>, width, height);</span><br><span class="line">    <span class="keyword">return</span> bmp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>老照片效果</li></ul><p>处理算法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">rn = (<span class="keyword">int</span>) (<span class="number">0.393</span> * r + <span class="number">0.769</span> * g + <span class="number">0.189</span> * b);</span><br><span class="line">gn = (<span class="keyword">int</span>) (<span class="number">0.349</span> * r + <span class="number">0.686</span> * g + <span class="number">0.168</span> * b);</span><br><span class="line">bn = (<span class="keyword">int</span>) (<span class="number">0.272</span> * r + <span class="number">0.534</span> * g + <span class="number">0.131</span> * b);</span><br></pre></td></tr></table></figure><p>示例代码和上面类似。</p><h1 id="图形特效"><a href="#图形特效" class="headerlink" title="图形特效"></a>图形特效</h1><p>可以将一张图像的形状进行处理，达到某种图形上的效果。Android中提供的常用处理方式有：平移、旋转、缩放和错切（skew），除了常用的处理方式，还可以通过变形矩阵自定义图形变换。</p><h2 id="变形矩阵——Matrix"><a href="#变形矩阵——Matrix" class="headerlink" title="变形矩阵——Matrix"></a>变形矩阵——Matrix</h2><p>类似于颜色矩阵，Android中使用变形矩阵（Matrix）处理图像的图形变换，变形矩阵是一个3x3的矩阵，对于图像的每个像素点，都有一个3x1的位置矩阵保存其X，Y的坐标值。</p><p>具体进行图形变换时，会将变形矩阵与每个像素的位置矩阵相乘，为每个像素设置新的位置，从而达到图像变换效果，具体过程如下所示：</p><p><img src="/uploads/android/变形矩阵处理过程.gif" alt="变形矩阵处理过程"></p><p>根据上述过程，可以得到：</p><p><img src="/uploads/android/变形处理结果.gif" alt="变形处理结果"></p><p>通常情况下为了保证 1 = gX + hY + i 成立，会令 g = h = 0，i = 1，这样，在处理图形变换时，只需要关注其它几个参数即可。</p><ul><li>平移变换（Translate）</li></ul><p>平移变换就是将所有像素点的坐标值进行平移，其变换过程如下：</p><p><img src="/uploads/android/平移变换过程.gif" alt="平移变换过程"></p><ul><li>旋转变换（Rotate）</li></ul><p>旋转变换是将像素点围绕一个中心点进行选择，以原点为中心旋转一定角度的变换过程如下：</p><p><img src="/uploads/android/旋转变换过程.gif" alt="旋转变换过程"></p><p>述变换过程是以坐标原点为中心旋转的，如果以任意点O为中心旋转通常需要：将坐标原点平移到O点；以原点为中心旋转；将坐标原点还原。</p><ul><li>缩放变换（Scale）</li></ul><p>缩放变换是对于多个像素点才会有效果，将图像沿X轴和Y轴按一定比例缩放的变换过程如下：</p><p><img src="/uploads/android/缩放变换过程.gif" alt="缩放变换过程"></p><ul><li>错切变换（Skew）</li></ul><p>错切变换是将所有像素点的X坐标（或Y坐标）保持不变，而对应的Y坐标（或X坐标）按比例发生平移，并且平移的大小和该点到X轴（或Y轴）的垂直距离成正比。</p><p>错切变换的示意图如下所示：</p><p><img src="/uploads/android/错切变换示意图.jpg" alt="错切变换示意图"></p><p>错切变换过程如下：</p><p><img src="/uploads/android/错切变换过程.gif" alt="错切变换过程"></p><h2 id="通过变形矩阵进行图形处理"><a href="#通过变形矩阵进行图形处理" class="headerlink" title="通过变形矩阵进行图形处理"></a>通过变形矩阵进行图形处理</h2><p>与颜色矩阵一样，变形矩阵也提供了相关API简化图形变换，其中Matrix提供的方法是进行2D变换的，而Camera提供的方法还可以进行3D变换。</p><h3 id="通过Matrix进行2D变换"><a href="#通过Matrix进行2D变换" class="headerlink" title="通过Matrix进行2D变换"></a>通过Matrix进行2D变换</h3><p>Matrix提供的变换API有：</p><ul><li>Matrix.setTranslate()：平移变换</li><li>Matrix.setRotate()：旋转变换</li><li>Matrix.setScale()：缩放变换</li><li>Matrix.setSkew()：错切变换</li><li>Matrix.setPolyToPoly() setRectToRect() setSinCos()：自定义变换</li><li>Matrix.preXXX()和Matrix.postXXX()：叠加变换</li></ul><p>当设置完Matrix后，把Matrix设置到Canvas上有两个方法：</p><ul><li>Canvas.setMatrix(matrix)：用Matrix直接替换Canvas当前的变换矩阵，即抛弃Canvas当前的变换，改用Matrix的变换</li><li>Canvas.concat(matrix)：用Canvas当前的变换矩阵和Matrix相乘，即基于Canvas当前的变换，叠加上Matrix中的变换</li></ul><h3 id="通过Camera进行3D变换"><a href="#通过Camera进行3D变换" class="headerlink" title="通过Camera进行3D变换"></a>通过Camera进行3D变换</h3><p>Camera提供的3D变换有三类：</p><ul><li>Camera.rotateXXX()：将虚拟相机的坐标轴沿X、Y、Z轴三个方向进行旋转，可以用来实现翻转效果。同时要注意，虚拟相机旋转的轴心是坐标原点。</li><li>Camera.translate(x, y, z)：将虚拟相机的坐标轴沿X、Y、Z轴三个方向进行移动，可以使用Canvas的translate()和scale()方法代替。</li><li>Camera.setLocation(x, y, z)：设置虚拟相机的位置，可以用来控制投影的图像大小。</li></ul><p>当设置完Camera后，把Camera的Matrix设置到Canvas需要使用Camera.applyToCanvas(canvas)方法。</p><p>示例代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">canvas.translate(centerX, centerY); <span class="comment">// 旋转之前把绘制内容移动到轴心（原点）</span></span><br><span class="line"></span><br><span class="line">camera.save(); <span class="comment">// 保存 Camera 的状态</span></span><br><span class="line">camera.rotateX(<span class="number">30</span>); <span class="comment">// 旋转 Camera 的三维空间</span></span><br><span class="line">camera.applyToCanvas(canvas); <span class="comment">// 把旋转投影到 Canvas</span></span><br><span class="line">camera.restore(); <span class="comment">// 恢复 Camera 的状态</span></span><br><span class="line"></span><br><span class="line">canvas.translate(-centerX, -centerY); <span class="comment">// 旋转之后把投绘制内容动回来</span></span><br></pre></td></tr></table></figure><h2 id="像素块分析"><a href="#像素块分析" class="headerlink" title="像素块分析"></a>像素块分析</h2><p>类似于颜色处理，除了使用矩阵的方式，还可以使用基于像素的方式进行图形处理。具体处理的时候需要使用drawBitmapMesh()方法，该方法像一张网格，把图像分成一个个像素块，通过改变像素块间节点的坐标位置，使整个图像的图形发生变化。</p><p>该方法具体形式如下：<br>drawBitmapMesh(Bitmap bitmap, int meshWidth, int meshHeight, float[] verts, int vertOffset, int[] colors, int colorOffset, Paint paint)</p><p>其中关键参数有：</p><ul><li>bitmap：需要形变的图像</li><li>meshWidth：横向网格数目</li><li>meshHeight：纵向网格数目</li><li>verts：网格交叉点坐标数组</li><li>vertOffset：绘制的时候，verts数组跳过坐标对数目</li></ul><p>其中最重要的参数是verts数组，drawBitmapMesh()方法绘制前会将图像分成多个像素块，假如在图像上的横向和纵向各画N（N &gt; 1，线条从图像边缘开始）条线，这些线会交叉组成NxN个的点，那么，每个点的坐标值以 x1, y1, x2, y2, … , xn, yn 的形式保存在verts数组中，drawBitmapMesh()方法就是通过改变这些坐标值，重新定位每个像素块，从而改变图像形状。</p><p>drawBitmapMesh()方法基本上可以实现所有的图像特效，其使用关键在于计算去，确定新的交叉点坐标。</p><h2 id="通过像素块进行图形处理"><a href="#通过像素块进行图形处理" class="headerlink" title="通过像素块进行图形处理"></a>通过像素块进行图形处理</h2><p>这里使用drawBitmapMesh()方法使一张图片产生“旗帜飞扬”的效果。</p><p>要达到这个效果，需要保持交叉点的横坐标不变，并且交叉点纵坐标呈现一个三角函数的周期变化。</p><ul><li>获取交叉点坐标</li></ul><p>基本原理是通过遍历所有的交叉线，按比例获取交叉点坐标。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 网线数目 = 网格数目 + 1</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> HEIGHT = <span class="number">19</span>; <span class="comment">// 纵向网格数目</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> WIDTH = <span class="number">29</span>; <span class="comment">// 横向网格数目</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取原始交叉点坐标</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">float</span>[] getBitmapVerts(Bitmap bitmap) &#123;</span><br><span class="line">    <span class="keyword">float</span>[] verts = <span class="keyword">new</span> <span class="keyword">float</span>[(WIDTH + <span class="number">1</span>) * (HEIGHT + <span class="number">1</span>) * <span class="number">2</span>]; <span class="comment">// 坐标值数目 = 2 * 交点数目</span></span><br><span class="line">    <span class="keyword">float</span> bitmapHeight = bitmap.getHeight();</span><br><span class="line">    <span class="keyword">float</span> bitmapWidth = bitmap.getWidth();</span><br><span class="line">    <span class="keyword">int</span> index = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> y = <span class="number">0</span>; y &lt;= HEIGHT; y++) &#123;</span><br><span class="line">        <span class="keyword">float</span> fy = bitmapHeight * y / HEIGHT;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> x = <span class="number">0</span>; x &lt;= WIDTH; x++) &#123;</span><br><span class="line">            <span class="keyword">float</span> fx = bitmapWidth * x / WIDTH;</span><br><span class="line">            verts[index * <span class="number">2</span>] = fx;</span><br><span class="line">            verts[index * <span class="number">2</span> + <span class="number">1</span>] = fy + <span class="number">100</span>; <span class="comment">// 为了避免图像偏移后被遮挡，将纵坐标+100，使图像下移</span></span><br><span class="line">            index++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> verts;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>改变交叉点坐标值</li></ul><p>横坐标不变，使用正弦函数改变纵坐标值。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 根据正选函数修改交叉点坐标</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> verts 交叉点坐标</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> K 相位，用于动态改变偏移量，实现动态效果</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> A 振幅，用于改变偏移幅度</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">flagWave</span><span class="params">(<span class="keyword">float</span>[] verts, <span class="keyword">float</span> K, <span class="keyword">float</span> A)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= HEIGHT; j++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= WIDTH; i++) &#123;</span><br><span class="line">            <span class="keyword">float</span> offsetY = (<span class="keyword">float</span>) Math.sin(((<span class="keyword">float</span>) i / WIDTH + K) * <span class="number">2</span> * Math.PI);</span><br><span class="line">            <span class="keyword">int</span> index = <span class="number">2</span> * (j * (WIDTH + <span class="number">1</span>) + i);</span><br><span class="line">            verts[index] += <span class="number">0</span>;</span><br><span class="line">            verts[index + <span class="number">1</span>] += offsetY * A;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>根据交叉点绘制图像</li></ul><p>这样绘制可以得到一个静态的效果。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">float</span> mVerts[] = getBitmapVerts(mBitmap);</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">float</span> K = <span class="number">0f</span>, A = <span class="number">50f</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onDraw</span><span class="params">(Canvas canvas)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>.onDraw(canvas);</span><br><span class="line"></span><br><span class="line">    flagWave(mVerts, K, A);</span><br><span class="line">    canvas.drawBitmapMesh(mBitmap, WIDTH, HEIGHT, mVerts, <span class="number">0</span>, <span class="keyword">null</span>, <span class="number">0</span>, <span class="keyword">null</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>重绘产生动态效果</li></ul><p>每次重绘时，通过改变正弦函数的相位来改变纵坐标的偏移量。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onDraw</span><span class="params">(Canvas canvas)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>.onDraw(canvas);</span><br><span class="line"></span><br><span class="line">    flagWave(mVerts, K, A);</span><br><span class="line">    canvas.drawBitmapMesh(mBitmap, WIDTH, HEIGHT, mVerts, <span class="number">0</span>, <span class="keyword">null</span>, <span class="number">0</span>, <span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 改变相位后重绘，产生飘扬效果</span></span><br><span class="line">    K += <span class="number">0.1f</span>;</span><br><span class="line">    postInvalidateDelayed(<span class="number">50</span>); <span class="comment">// 延时重绘，避免飘扬太快</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;图像特效按照处理对象一般可以分为颜色特效和图形特效两类，下面分别进行介绍。&lt;/p&gt;
&lt;h1 id=&quot;颜色特效&quot;&gt;&lt;a href=&quot;#颜色特效&quot; class=&quot;headerlink&quot; title=&quot;颜色特效&quot;&gt;&lt;/a&gt;颜色特效&lt;/h1&gt;&lt;p&gt;在Android系统中，通常使用B
      
    
    </summary>
    
      <category term="Android" scheme="http://yoursite.com/categories/Android/"/>
    
    
      <category term="绘图处理" scheme="http://yoursite.com/tags/%E7%BB%98%E5%9B%BE%E5%A4%84%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>XML绘图</title>
    <link href="http://yoursite.com/2018/01/02/XML%E7%BB%98%E5%9B%BE/"/>
    <id>http://yoursite.com/2018/01/02/XML绘图/</id>
    <published>2018-01-02T02:03:01.000Z</published>
    <updated>2018-01-02T03:07:56.519Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Bitmap"><a href="#Bitmap" class="headerlink" title="Bitmap"></a>Bitmap</h1><p>在XML中使用Bitmap的语法如下所示：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">bitmap</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:src</span>=<span class="string">"@[package:]drawable/drawable_resource"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:antialias</span>=<span class="string">[</span>"<span class="attr">true</span>" | "<span class="attr">false</span>"]</span></span><br><span class="line"><span class="tag">    <span class="attr">android:dither</span>=<span class="string">[</span>"<span class="attr">true</span>" | "<span class="attr">false</span>"]</span></span><br><span class="line"><span class="tag">    <span class="attr">android:filter</span>=<span class="string">[</span>"<span class="attr">true</span>" | "<span class="attr">false</span>"]</span></span><br><span class="line"><span class="tag">    <span class="attr">android:gravity</span>=<span class="string">[</span>"<span class="attr">top</span>" | "<span class="attr">bottom</span>" | "<span class="attr">left</span>" | "<span class="attr">right</span>" | "<span class="attr">center_vertical</span>" |</span></span><br><span class="line"><span class="tag">                    "<span class="attr">fill_vertical</span>" | "<span class="attr">center_horizontal</span>" | "<span class="attr">fill_horizontal</span>" |</span></span><br><span class="line"><span class="tag">                    "<span class="attr">center</span>" | "<span class="attr">fill</span>" | "<span class="attr">clip_vertical</span>" | "<span class="attr">clip_horizontal</span>"]</span></span><br><span class="line"><span class="tag">    <span class="attr">android:mipMap</span>=<span class="string">[</span>"<span class="attr">true</span>" | "<span class="attr">false</span>"]</span></span><br><span class="line"><span class="tag">    <span class="attr">android:tileMode</span>=<span class="string">[</span>"<span class="attr">disabled</span>" | "<span class="attr">clamp</span>" | "<span class="attr">repeat</span>" | "<span class="attr">mirror</span>"] /&gt;</span></span><br></pre></td></tr></table></figure><p>通过这种方式引用图片，可以直接将res中只读的图片资源转成Bitmap对象使用。</p><h1 id="Shape"><a href="#Shape" class="headerlink" title="Shape"></a>Shape</h1><p>在XML中使用Shape的语法如下所示：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">shape</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:shape</span>=<span class="string">[</span>"<span class="attr">rectangle</span>" | "<span class="attr">oval</span>" | "<span class="attr">line</span>" | "<span class="attr">ring</span>"] &gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">corners</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:radius</span>=<span class="string">"integer"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:topLeftRadius</span>=<span class="string">"integer"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:topRightRadius</span>=<span class="string">"integer"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:bottomLeftRadius</span>=<span class="string">"integer"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:bottomRightRadius</span>=<span class="string">"integer"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">gradient</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:angle</span>=<span class="string">"integer"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:centerX</span>=<span class="string">"float"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:centerY</span>=<span class="string">"float"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:centerColor</span>=<span class="string">"integer"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:endColor</span>=<span class="string">"color"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:gradientRadius</span>=<span class="string">"integer"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:startColor</span>=<span class="string">"color"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:type</span>=<span class="string">[</span>"<span class="attr">linear</span>" | "<span class="attr">radial</span>" | "<span class="attr">sweep</span>"]</span></span><br><span class="line"><span class="tag">        <span class="attr">android:useLevel</span>=<span class="string">[</span>"<span class="attr">true</span>" | "<span class="attr">false</span>"] /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">padding</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:left</span>=<span class="string">"integer"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:top</span>=<span class="string">"integer"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:right</span>=<span class="string">"integer"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:bottom</span>=<span class="string">"integer"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">size</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:width</span>=<span class="string">"integer"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:height</span>=<span class="string">"integer"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">solid</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:color</span>=<span class="string">"color"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">stroke</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:width</span>=<span class="string">"integer"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:color</span>=<span class="string">"color"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:dashWidth</span>=<span class="string">"integer"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:dashGap</span>=<span class="string">"integer"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">shape</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Shape是XML绘图的关键，无论是扁平化、拟物化还是渐变，它都可以实现。</p><h1 id="Layer"><a href="#Layer" class="headerlink" title="Layer"></a>Layer</h1><p>在XML中使用Layer的语法如下所示：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">layer-list</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span> &gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">item</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:drawable</span>=<span class="string">"@[package:]drawable/drawable_resource"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">"@[+][package:]id/resource_name"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:top</span>=<span class="string">"dimension"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:right</span>=<span class="string">"dimension"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:bottom</span>=<span class="string">"dimension"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:left</span>=<span class="string">"dimension"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">layer-list</span>&gt;</span></span><br></pre></td></tr></table></figure><p>通过Layer可以很方便地实现图层叠加的效果。</p><h1 id="Selector"><a href="#Selector" class="headerlink" title="Selector"></a>Selector</h1><p>Selector用于定义的可绘制对象，它根据对象的状态，使用多个不同的图像来表示同一个图形。</p><p>在XML中使用Selector的语法如下所示：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">selector</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span> </span></span><br><span class="line"><span class="tag">    <span class="attr">android:constantSize</span>=<span class="string">[</span>"<span class="attr">true</span>" | "<span class="attr">false</span>"]</span></span><br><span class="line"><span class="tag">    <span class="attr">android:dither</span>=<span class="string">[</span>"<span class="attr">true</span>" | "<span class="attr">false</span>"]</span></span><br><span class="line"><span class="tag">    <span class="attr">android:variablePadding</span>=<span class="string">[</span>"<span class="attr">true</span>" | "<span class="attr">false</span>"] &gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">item</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:drawable</span>=<span class="string">"@[package:]drawable/drawable_resource"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:state_pressed</span>=<span class="string">[</span>"<span class="attr">true</span>" | "<span class="attr">false</span>"]</span></span><br><span class="line"><span class="tag">        <span class="attr">android:state_focused</span>=<span class="string">[</span>"<span class="attr">true</span>" | "<span class="attr">false</span>"]</span></span><br><span class="line"><span class="tag">        <span class="attr">android:state_hovered</span>=<span class="string">[</span>"<span class="attr">true</span>" | "<span class="attr">false</span>"]</span></span><br><span class="line"><span class="tag">        <span class="attr">android:state_selected</span>=<span class="string">[</span>"<span class="attr">true</span>" | "<span class="attr">false</span>"]</span></span><br><span class="line"><span class="tag">        <span class="attr">android:state_checkable</span>=<span class="string">[</span>"<span class="attr">true</span>" | "<span class="attr">false</span>"]</span></span><br><span class="line"><span class="tag">        <span class="attr">android:state_checked</span>=<span class="string">[</span>"<span class="attr">true</span>" | "<span class="attr">false</span>"]</span></span><br><span class="line"><span class="tag">        <span class="attr">android:state_enabled</span>=<span class="string">[</span>"<span class="attr">true</span>" | "<span class="attr">false</span>"]</span></span><br><span class="line"><span class="tag">        <span class="attr">android:state_activated</span>=<span class="string">[</span>"<span class="attr">true</span>" | "<span class="attr">false</span>"]</span></span><br><span class="line"><span class="tag">        <span class="attr">android:state_window_focused</span>=<span class="string">[</span>"<span class="attr">true</span>" | "<span class="attr">false</span>"] /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">selector</span>&gt;</span></span><br></pre></td></tr></table></figure><p>通过Selector可以快速实现View的触摸反馈。通过配置不同的触发事件，自动选择不同的图像作为背景图。</p><h1 id="更多"><a href="#更多" class="headerlink" title="更多"></a>更多</h1><p>以上只是介绍了常用的XML绘图方法，更多XML绘图方法可以参考<a href="https://developer.android.com/guide/topics/resources/drawable-resource.html" target="_blank" rel="noopener">官方文档</a>。</p><p>另外，上面介绍的XML绘图方法是可以配合使用的，比如在Selector中的Item中使用Shape实现圆角的背景图片。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Bitmap&quot;&gt;&lt;a href=&quot;#Bitmap&quot; class=&quot;headerlink&quot; title=&quot;Bitmap&quot;&gt;&lt;/a&gt;Bitmap&lt;/h1&gt;&lt;p&gt;在XML中使用Bitmap的语法如下所示：&lt;/p&gt;
&lt;figure class=&quot;highlight xml
      
    
    </summary>
    
      <category term="Android" scheme="http://yoursite.com/categories/Android/"/>
    
    
      <category term="绘图处理" scheme="http://yoursite.com/tags/%E7%BB%98%E5%9B%BE%E5%A4%84%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>2D绘图</title>
    <link href="http://yoursite.com/2018/01/02/2D%E7%BB%98%E5%9B%BE/"/>
    <id>http://yoursite.com/2018/01/02/2D绘图/</id>
    <published>2018-01-02T01:42:10.000Z</published>
    <updated>2018-01-02T01:52:04.520Z</updated>
    
    <content type="html"><![CDATA[<h1 id="绘图基础"><a href="#绘图基础" class="headerlink" title="绘图基础"></a>绘图基础</h1><p>Android系统提供了Canvas和Paint对象进行绘图，类似于现实生活中的画板和画笔。</p><p>Canvas提供了绘制各种图形的API，常用的有：</p><ul><li>drawPoint(); 绘制点</li><li>drawLine(); 绘制线</li><li>drawRect(); 绘制矩形</li><li>drawRoundRect(); 绘制圆角矩形</li><li>drawVertices(); 绘制多边形</li><li>drawArc(); 绘制弧形和扇形</li><li>drawCircle(); 绘制圆</li><li>drawOval(); 绘制椭圆</li><li>drawText(); 绘制文本</li><li>drawColor(); 绘制颜色</li><li>drawPath(); 绘制路径（可以用于绘制自定义图形）</li><li>drawBitmap(); 绘制图像</li></ul><p>Paint提供了各种绘制效果的API，常用的有：</p><ul><li>setAntiAlias(); 设置画笔的锯齿效果</li><li>setColor(); 设置画笔的颜色</li><li>setARGB(); 设置画笔的A R G B值</li><li>setAlpha(); 设置画笔的透明度</li><li>setTextSize(); 设置字体的尺寸</li><li>setStyle(); 设置画笔的风格（实心或空心等）</li><li>setStrokeWidth(); 设置画笔的宽度</li></ul><p>具体绘制的时候，可以任意组合Canvas和Paint的API实现不同的绘制效果，比如绘制一个红色实心矩形。</p><h1 id="Canvas高级使用"><a href="#Canvas高级使用" class="headerlink" title="Canvas高级使用"></a>Canvas高级使用</h1><p>虽然通过Canvas的drawXXX()方法可以绘制各种图形，但是对于一些复杂的图形，会涉及到复杂的坐标运算，为了简化坐标运算，可以使用以下方法。</p><ul><li><p>Canvas.save()和Canvas.restore()<br>save()的作用是将之前已绘制的图像保存起来，这样，后续绘制操作相当于在一个新的图层上进行；<br>restore()方法作用是将save()之后绘制的图像与save()之前绘制的图像进行合并，即将新的图层绘制到Canvas上；<br>这两个方法一般是配合使用；</p></li><li><p>Canvas.translate()和Canvas.rotate()<br>translate(x, y)方法可以理解为将绘图的坐标原点(0, 0)移到(x, y)，后续的绘图操作都以(x, y)为原点进行；<br>rotate()方法可以理解为将绘图的坐标系旋转一定的角度，后续的绘图操作都以旋转后的坐标系为参照进行，这样可以减少坐标计算，例如，在原坐标系中的斜线，在旋转后的坐标系中只需要绘制成直线；</p></li></ul><p>Canvas还提供了clipXXX()方法对图像进行裁剪，比如clipRect()方法可以将绘制好的图像裁剪成为矩形。</p><h1 id="Layer图层"><a href="#Layer图层" class="headerlink" title="Layer图层"></a>Layer图层</h1><p>一张复杂的图像可以由多个图层叠加形成，多个图层就形成了一个栈的结构，Android系统对图层的管理就是通过栈的结构进行的。</p><p>saveLayer()和saveLayerAlpha()方法将一个图层入栈；restore()和restoreToCount()方法将一个图层出栈。</p><p>入栈的时候，后面所有的绘制操作都发生在这个图层上；出栈的时候，会把图层上的图像绘制到Canvas上。</p><p>通过控制图层的位置、透明度等，可以绘制出各种复杂的图像。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;绘图基础&quot;&gt;&lt;a href=&quot;#绘图基础&quot; class=&quot;headerlink&quot; title=&quot;绘图基础&quot;&gt;&lt;/a&gt;绘图基础&lt;/h1&gt;&lt;p&gt;Android系统提供了Canvas和Paint对象进行绘图，类似于现实生活中的画板和画笔。&lt;/p&gt;
&lt;p&gt;Canvas提供
      
    
    </summary>
    
      <category term="Android" scheme="http://yoursite.com/categories/Android/"/>
    
    
      <category term="绘图处理" scheme="http://yoursite.com/tags/%E7%BB%98%E5%9B%BE%E5%A4%84%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>屏幕信息</title>
    <link href="http://yoursite.com/2017/12/29/%E5%B1%8F%E5%B9%95%E4%BF%A1%E6%81%AF/"/>
    <id>http://yoursite.com/2017/12/29/屏幕信息/</id>
    <published>2017-12-29T01:43:49.000Z</published>
    <updated>2018-01-02T02:59:51.061Z</updated>
    
    <content type="html"><![CDATA[<p>Android手机屏幕的尺寸、分辨率多种多样，这为绘图造成了一定的难度，想要在不同的屏幕上保持绘图的准确性，需要对屏幕的信息有充分了解。</p><h1 id="屏幕参数"><a href="#屏幕参数" class="headerlink" title="屏幕参数"></a>屏幕参数</h1><p>通常Android手机屏幕有下面几个参数：</p><ul><li><p>屏幕尺寸<br>指屏幕对角线的长度，通常使用“寸”表示，比如4.7寸手机。</p></li><li><p>分辨率<br>指屏幕像素点的个数，例如720 x 1280分辨率手机表示：宽有个720个像素点，高有1280个像素点。</p></li><li><p>ppi或dpi<br>指每英寸像素（Pixels Per Inch），又称dpi（Dots Per Inch），由对角线的像素点个数除以屏幕的尺寸得到。</p></li></ul><h1 id="Android系统屏幕密度"><a href="#Android系统屏幕密度" class="headerlink" title="Android系统屏幕密度"></a>Android系统屏幕密度</h1><p>虽然Android手机有各种尺寸和分辨率，但是Android系统定义了几个标准的dpi值，在具体适配时，只需要对下面表格里的标准dpi进行适配即可。</p><table><thead><tr><th>屏幕类型</th><th>ldpi</th><th>mdpi</th><th>hdpi</th><th>xhdpi</th><th>xxhdpi</th></tr></thead><tbody><tr><td>密度值</td><td>120</td><td>160</td><td>240</td><td>320</td><td>480</td></tr><tr><td>分辨率</td><td>240x320</td><td>320x480</td><td>480x800</td><td>720x1280</td><td>1080x1920</td></tr></tbody></table><h1 id="独立像素密度dp"><a href="#独立像素密度dp" class="headerlink" title="独立像素密度dp"></a>独立像素密度dp</h1><p>由于Android手机屏幕密度不同，因此，同样的像素点个数在不同屏幕上显示的长度也不同，因为高密度屏幕在同样的长度范围包含更多像素点。为了解决这个问题，Android系统使用dp（Device Independent Pixels，又称dip）表示屏幕长度，并规定在mdpi中，1dp = 1px，这样可以根据屏幕的密度值进行换算，得到每种屏幕密度对应的像素数目，例如，在xhdpi中，1dp = 320/160 * 1px = 2px。</p><h1 id="单位转换"><a href="#单位转换" class="headerlink" title="单位转换"></a>单位转换</h1><p>根据上面的分析，可以手动对像素单位进行转换，不过更好的方式是使用系统的TypedValue类，代码如下所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * dip to pixels</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">float</span> <span class="title">dipToPixels</span><span class="params">(Context context, <span class="keyword">float</span> dipValue)</span> </span>&#123;</span><br><span class="line">    DisplayMetrics metrics = context.getResources().getDisplayMetrics();</span><br><span class="line">    <span class="keyword">return</span> TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP, dipValue, metrics);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * sp to pixels</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">float</span> <span class="title">spToPixels</span><span class="params">(Context context, <span class="keyword">float</span> spValue)</span> </span>&#123;</span><br><span class="line">    DisplayMetrics metrics = context.getResources().getDisplayMetrics();</span><br><span class="line">    <span class="keyword">return</span> TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_SP, spValue, metrics);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Android手机屏幕的尺寸、分辨率多种多样，这为绘图造成了一定的难度，想要在不同的屏幕上保持绘图的准确性，需要对屏幕的信息有充分了解。&lt;/p&gt;
&lt;h1 id=&quot;屏幕参数&quot;&gt;&lt;a href=&quot;#屏幕参数&quot; class=&quot;headerlink&quot; title=&quot;屏幕参数&quot;&gt;&lt;/
      
    
    </summary>
    
      <category term="Android" scheme="http://yoursite.com/categories/Android/"/>
    
    
      <category term="绘图处理" scheme="http://yoursite.com/tags/%E7%BB%98%E5%9B%BE%E5%A4%84%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>实现滑动的方法</title>
    <link href="http://yoursite.com/2017/12/27/%E5%AE%9E%E7%8E%B0%E6%BB%91%E5%8A%A8%E7%9A%84%E6%96%B9%E6%B3%95/"/>
    <id>http://yoursite.com/2017/12/27/实现滑动的方法/</id>
    <published>2017-12-27T10:26:58.000Z</published>
    <updated>2017-12-28T07:20:36.224Z</updated>
    
    <content type="html"><![CDATA[<p>了解<a href="/2017/12/26/滑动实现原理/">滑动实现原理</a>后，可以总结出实现滑动效果的基本思想：当View被触摸时，记录当前触摸点的坐标；当触摸点移动时，记录移动后触摸点的坐标；根据两次获取的坐标计算出触摸点的偏移量，通过偏移量修改View的坐标；不断重复，实现滑动效果。</p><p>接下来介绍实现滑动效果的一些方法。</p><h1 id="layout方法"><a href="#layout方法" class="headerlink" title="layout方法"></a>layout方法</h1><p>在View进行绘制时，会调用onLayout()方法设置显示的位置，因此，可以通过修改View的left，top，right，bottom属性来控制View的坐标。具体在onTouchEvent()方法中实现，示例代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onTouchEvent</span><span class="params">(MotionEvent event)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 获取触摸点坐标</span></span><br><span class="line">    <span class="keyword">int</span> x = (<span class="keyword">int</span>) event.getX();</span><br><span class="line">    <span class="keyword">int</span> y = (<span class="keyword">int</span>) event.getY();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">switch</span> (event.getAction()) &#123;</span><br><span class="line">        <span class="keyword">case</span> MotionEvent.ACTION_DOWN:</span><br><span class="line">            <span class="comment">// 记录当前触摸点坐标</span></span><br><span class="line">            lastX = x;</span><br><span class="line">            lastY = y;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">case</span> MotionEvent.ACTION_MOVE:</span><br><span class="line">            <span class="comment">// 计算偏移量</span></span><br><span class="line">            <span class="keyword">int</span> offsetX = x - lastX;</span><br><span class="line">            <span class="keyword">int</span> offsetY = y - lastY;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 根据偏移量重新布局View，使View移动产生滑动效果</span></span><br><span class="line">            layout(getLeft() + offsetX, getTop() + offsetY,</span><br><span class="line">                    getRight() + offsetX, getBottom() + offsetY);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">super</span>.onTouchEvent(event);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>面的示例代码是通过getX()和getY()方法获取触摸事件的坐标值，下面以getRawX()和getRawY()方法来获取坐标值实现滑动效果：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onTouchEvent</span><span class="params">(MotionEvent event)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 获取触摸点坐标</span></span><br><span class="line">    <span class="keyword">int</span> rawX = (<span class="keyword">int</span>) event.getRawX();</span><br><span class="line">    <span class="keyword">int</span> rawY = (<span class="keyword">int</span>) event.getRawY();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">switch</span> (event.getAction()) &#123;</span><br><span class="line">        <span class="keyword">case</span> MotionEvent.ACTION_DOWN:</span><br><span class="line">            <span class="comment">// 记录当前触摸点坐标</span></span><br><span class="line">            lastX = rawX;</span><br><span class="line">            lastY = rawY;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">case</span> MotionEvent.ACTION_MOVE:</span><br><span class="line">            <span class="comment">// 计算偏移量</span></span><br><span class="line">            <span class="keyword">int</span> offsetX = rawX - lastX;</span><br><span class="line">            <span class="keyword">int</span> offsetY = rawY - lastY;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 根据偏移量重新布局View，使View移动产生滑动效果</span></span><br><span class="line">            layout(getLeft() + offsetX, getTop() + offsetY,</span><br><span class="line">                    getRight() + offsetX, getBottom() + offsetY);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 重新设置初始坐标</span></span><br><span class="line">            lastX = rawX;</span><br><span class="line">            lastY = rawY;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">super</span>.onTouchEvent(event);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注意</strong></p><blockquote><p>使用绝对坐标系时，每次执行完ACTION_MOVE逻辑后，一定要重新设置初始坐标，这样才能准确获取连续移动时的偏移量。因为在相对坐标系中，ACTION_DOWN事件的坐标值对于View是不变的，而在绝对坐标系中，这个坐标值对于View是变化的。</p></blockquote><h1 id="offsetLeftAndRight和offsetTopAndBottom方法"><a href="#offsetLeftAndRight和offsetTopAndBottom方法" class="headerlink" title="offsetLeftAndRight和offsetTopAndBottom方法"></a>offsetLeftAndRight和offsetTopAndBottom方法</h1><p>这两个方法只需要偏移量就可以完成View的重新绘制，达到layout方法同样的效果，示例代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onTouchEvent</span><span class="params">(MotionEvent event)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 获取触摸点坐标</span></span><br><span class="line">    <span class="keyword">int</span> x = (<span class="keyword">int</span>) event.getX();</span><br><span class="line">    <span class="keyword">int</span> y = (<span class="keyword">int</span>) event.getY();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">switch</span> (event.getAction()) &#123;</span><br><span class="line">        <span class="keyword">case</span> MotionEvent.ACTION_DOWN:</span><br><span class="line">            <span class="comment">// 记录当前触摸点坐标</span></span><br><span class="line">            lastX = x;</span><br><span class="line">            lastY = y;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">case</span> MotionEvent.ACTION_MOVE:</span><br><span class="line">            <span class="comment">// 计算偏移量</span></span><br><span class="line">            <span class="keyword">int</span> offsetX = x - lastX;</span><br><span class="line">            <span class="keyword">int</span> offsetY = y - lastY;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 根据偏移量重新布局View，使View移动产生滑动效果</span></span><br><span class="line">            offsetLeftAndRight(offsetX);</span><br><span class="line">            offsetTopAndBottom(offsetY);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">super</span>.onTouchEvent(event);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="LayoutParams"><a href="#LayoutParams" class="headerlink" title="LayoutParams"></a>LayoutParams</h1><p>LayoutParams保存了View的布局参数，可以通过改变LayoutParams来动态修改View的位置参数，实现View的滑动效果。具体示例代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onTouchEvent</span><span class="params">(MotionEvent event)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 获取触摸点坐标</span></span><br><span class="line">    <span class="keyword">int</span> x = (<span class="keyword">int</span>) event.getX();</span><br><span class="line">    <span class="keyword">int</span> y = (<span class="keyword">int</span>) event.getY();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">switch</span> (event.getAction()) &#123;</span><br><span class="line">        <span class="keyword">case</span> MotionEvent.ACTION_DOWN:</span><br><span class="line">            <span class="comment">// 记录当前触摸点坐标</span></span><br><span class="line">            lastX = x;</span><br><span class="line">            lastY = y;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">case</span> MotionEvent.ACTION_MOVE:</span><br><span class="line">            <span class="comment">// 计算偏移量</span></span><br><span class="line">            <span class="keyword">int</span> offsetX = x - lastX;</span><br><span class="line">            <span class="keyword">int</span> offsetY = y - lastY;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 根据偏移量重新布局View，使View移动产生滑动效果</span></span><br><span class="line">            ViewGroup.MarginLayoutParams layoutParams =</span><br><span class="line">                    (ViewGroup.MarginLayoutParams) getLayoutParams();</span><br><span class="line">            layoutParams.leftMargin += offsetX;</span><br><span class="line">            layoutParams.topMargin += offsetY;</span><br><span class="line">            setLayoutParams(layoutParams);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">super</span>.onTouchEvent(event);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="scrollTo与scrollBy方法"><a href="#scrollTo与scrollBy方法" class="headerlink" title="scrollTo与scrollBy方法"></a>scrollTo与scrollBy方法</h1><p>View提供了scrollTo与scrollBy方法来改变View的位置，scrollTo(x,  y)表示移动到坐标点(x, y)，scrollBy(dx, dy)表示移动的增量为dx、dy。</p><p>scrollTo与scrollBy方法的本质是移动View，从而使View中content产生相对移动。以下示意图以scrollBy方法为例进行说明：</p><p><img src="/uploads/android/理解scrollBy方法.png" alt="理解scrollBy方法"></p><p>从示意图可以看出，content移动的方向和ViewGroup移动的方向是相反的，所以，如果以子View的偏移量来移动ViewGroup来达到子View的滑动效果，那么，scrollBy中的偏移量要使用负值。</p><p>根据以上分析，使用scrollBy方法实现滑动效果的示例代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onTouchEvent</span><span class="params">(MotionEvent event)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 获取触摸点坐标</span></span><br><span class="line">    <span class="keyword">int</span> x = (<span class="keyword">int</span>) event.getX();</span><br><span class="line">    <span class="keyword">int</span> y = (<span class="keyword">int</span>) event.getY();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">switch</span> (event.getAction()) &#123;</span><br><span class="line">        <span class="keyword">case</span> MotionEvent.ACTION_DOWN:</span><br><span class="line">            <span class="comment">// 记录当前触摸点坐标</span></span><br><span class="line">            lastX = x;</span><br><span class="line">            lastY = y;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">case</span> MotionEvent.ACTION_MOVE:</span><br><span class="line">            <span class="comment">// 计算偏移量</span></span><br><span class="line">            <span class="keyword">int</span> offsetX = x - lastX;</span><br><span class="line">            <span class="keyword">int</span> offsetY = y - lastY;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 根据偏移量重新布局View，使View移动产生滑动效果</span></span><br><span class="line">            ((View) getParent()).scrollBy(-offsetX, -offsetY);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">super</span>.onTouchEvent(event);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>类似的，在绝对坐标系中，可以使用scrollTo方法实现同样的滑动效果。</p><h1 id="Scroller"><a href="#Scroller" class="headerlink" title="Scroller"></a>Scroller</h1><p>在使用scrollTo与scrollBy方法移动时，View的移动都是瞬时完成的，为了产生平滑移动的效果，需要使用Scroller类。</p><p>Scroller的原理也是使用scrollTo与scrollBy方法来移动View，但是它会把移动的偏移量分为多个很小的偏移量，虽然在每个小的偏移量里面，移动是瞬时的，但是整体上会是一个平滑的移动效果。</p><p>使用Scroller类实现滑动效果需要以下几个步骤：</p><ul><li>初始化Scroller</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mScroller = <span class="keyword">new</span> Scroller(context);</span><br></pre></td></tr></table></figure><ul><li>重写computeScroll()方法，实现平滑移动</li></ul><p>系统绘制View的时候会在draw()方法中调用computeScroll()方法，可以在computeScroll()中使用scrollTo()方法进行小的偏移量的移动，接着调用invalidate()方法触发draw()方法，形成一个循环过程，最终实现平滑移动。示例代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">computeScroll</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>.computeScroll();</span><br><span class="line">    <span class="comment">// 判断Scroller是否执行完毕</span></span><br><span class="line">    <span class="keyword">if</span> (mScroller.computeScrollOffset()) &#123;</span><br><span class="line">        ((View) getParent()).scrollTo(mScroller.getCurrX(), mScroller.getCurrY());</span><br><span class="line">        <span class="comment">// 通过重绘不断调用computeScroll()，达到平滑移动的效果</span></span><br><span class="line">        invalidate();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Scroller类提供了computeScrollOffset()方法来判断是否完成了整个滑动过程，用时提供了getCurX()、getCurY()方法获取当前的滑动坐标。</p><ul><li>执行startScroll()方法，执行滑动过程</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onTouchEvent</span><span class="params">(MotionEvent event)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 获取触摸点坐标</span></span><br><span class="line">    <span class="keyword">int</span> x = (<span class="keyword">int</span>) event.getX();</span><br><span class="line">    <span class="keyword">int</span> y = (<span class="keyword">int</span>) event.getY();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">switch</span> (event.getAction()) &#123;</span><br><span class="line">        <span class="keyword">case</span> MotionEvent.ACTION_DOWN:</span><br><span class="line">            <span class="comment">// 记录当前触摸点坐标</span></span><br><span class="line">            lastX = x;</span><br><span class="line">            lastY = y;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">case</span> MotionEvent.ACTION_MOVE:</span><br><span class="line">            <span class="comment">// 计算偏移量</span></span><br><span class="line">            <span class="keyword">int</span> offsetX = x - lastX;</span><br><span class="line">            <span class="keyword">int</span> offsetY = y - lastY;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 执行滑动过程</span></span><br><span class="line">            View viewGroup = (View) getParent();</span><br><span class="line">            mScroller.startScroll(viewGroup.getScrollX(), viewGroup.getScrollY(),</span><br><span class="line">                    -offsetX, -offsetY, <span class="number">0</span>);</span><br><span class="line">            <span class="comment">// 通过重绘首次触发computeScroll()</span></span><br><span class="line">            invalidate();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">super</span>.onTouchEvent(event);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通常使用getScrollX()和getScrollY()方法获取滑动的起始坐标，由于是父视图在滑动，因此，偏移值的正负情况与scrollTo、scrollBy方法相同。同时，需要注意调用invalidate()触发computeScroll()方法进行滑动过程。</p><h1 id="ViewDragHelper"><a href="#ViewDragHelper" class="headerlink" title="ViewDragHelper"></a>ViewDragHelper</h1><p>Android的Support库中提供了DrawerLayout和SlidingPaneLayout方便实现侧滑菜单的效果，这两个布局就是通过ViewDragHelper类实现的。通过ViewDragHelper类，基本可以实现各种不同的Scroll、Drag需求。</p><p>ViewDragHelper功能比较强大，使用也相对比较复杂，具体使用可以搜索相关资料，这里就不详细介绍了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;了解&lt;a href=&quot;/2017/12/26/滑动实现原理/&quot;&gt;滑动实现原理&lt;/a&gt;后，可以总结出实现滑动效果的基本思想：当View被触摸时，记录当前触摸点的坐标；当触摸点移动时，记录移动后触摸点的坐标；根据两次获取的坐标计算出触摸点的偏移量，通过偏移量修改View的坐标；
      
    
    </summary>
    
      <category term="Android" scheme="http://yoursite.com/categories/Android/"/>
    
    
      <category term="滑动效果" scheme="http://yoursite.com/tags/%E6%BB%91%E5%8A%A8%E6%95%88%E6%9E%9C/"/>
    
  </entry>
  
  <entry>
    <title>滑动实现原理</title>
    <link href="http://yoursite.com/2017/12/26/%E6%BB%91%E5%8A%A8%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86/"/>
    <id>http://yoursite.com/2017/12/26/滑动实现原理/</id>
    <published>2017-12-26T11:40:57.000Z</published>
    <updated>2017-12-26T12:01:52.420Z</updated>
    
    <content type="html"><![CDATA[<h1 id="滑动的产生"><a href="#滑动的产生" class="headerlink" title="滑动的产生"></a>滑动的产生</h1><p>View的滑动，本质上是移动View，即改变View所处的位置，这点和动画效果类似，都是通过不断改变View的坐标来实现的。</p><p>因此，要产生滑动效果，需要监听用户的触摸事件，根据事件的坐标信息不断改变View的坐标，使View跟随用户的触摸进行移动。</p><p>滑动是相对的移动，要实现滑动，就必须了解Android系统中的坐标体系和触摸事件(MotionEvent)，接下来对坐标体系和触摸事件进行说明。</p><h1 id="系统坐标系"><a href="#系统坐标系" class="headerlink" title="系统坐标系"></a>系统坐标系</h1><p>Android系统的坐标系如下图所示：</p><p><img src="/uploads/android/系统坐标系.png" alt="系统坐标系"></p><p>系统提供了getLocationOnScreen()方法获取View在系统坐标系的位置，即该View左上角在系统坐标系的位置。</p><p>触摸事件中触摸点的系统坐标使用getRawX()和getRawY()方法获取。</p><h1 id="视图坐标系"><a href="#视图坐标系" class="headerlink" title="视图坐标系"></a>视图坐标系</h1><p>除了系统坐标系，Android中还有视图坐标系，它用来描述子View在父View中的位置，系统坐标系如下图所示：</p><p><img src="/uploads/android/视图坐标系.png" alt="视图坐标系"></p><p>触摸事件中触摸点的视图坐标使用getX()和getY()方法获取。</p><h1 id="触摸事件与坐标系"><a href="#触摸事件与坐标系" class="headerlink" title="触摸事件与坐标系"></a>触摸事件与坐标系</h1><p>触摸事件MotionEvent中封装了常用的事件常量，这些常量定义了不同的类型的触摸事件，可以使用getAction()方法获取。</p><p>下面用一幅图来描述一些获取坐标值和相对距离的常用API：</p><p><img src="/uploads/android/坐标系常用API.png" alt="坐标系常用API"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;滑动的产生&quot;&gt;&lt;a href=&quot;#滑动的产生&quot; class=&quot;headerlink&quot; title=&quot;滑动的产生&quot;&gt;&lt;/a&gt;滑动的产生&lt;/h1&gt;&lt;p&gt;View的滑动，本质上是移动View，即改变View所处的位置，这点和动画效果类似，都是通过不断改变View的坐标来
      
    
    </summary>
    
      <category term="Android" scheme="http://yoursite.com/categories/Android/"/>
    
    
      <category term="滑动效果" scheme="http://yoursite.com/tags/%E6%BB%91%E5%8A%A8%E6%95%88%E6%9E%9C/"/>
    
  </entry>
  
  <entry>
    <title>事件拦截机制</title>
    <link href="http://yoursite.com/2017/12/21/%E4%BA%8B%E4%BB%B6%E6%8B%A6%E6%88%AA%E6%9C%BA%E5%88%B6/"/>
    <id>http://yoursite.com/2017/12/21/事件拦截机制/</id>
    <published>2017-12-21T10:08:19.000Z</published>
    <updated>2017-12-21T10:23:01.674Z</updated>
    
    <content type="html"><![CDATA[<p>在对控件进行测量、布局、绘制一系列工作后，想要让控件与用户进行交互，就需要涉及到Android的事件拦截机制。Android系统提供了一套完善的事件分发、拦截、处理机制，让控件能够对用户输入的事件进行准确的响应和处理。</p><h1 id="触摸事件"><a href="#触摸事件" class="headerlink" title="触摸事件"></a>触摸事件</h1><p>Android中使用MotionEvent类代表一个触摸事件，比如用户的点击、滑动事件，从MotionEvent类中，可以获取事件的类型、点击坐标等一系列信息。</p><h1 id="事件拦截机制分析"><a href="#事件拦截机制分析" class="headerlink" title="事件拦截机制分析"></a>事件拦截机制分析</h1><p>在描述事件拦截机制前，要明确Android的视图是树结构。树结构具有层次，一个事件会从顶层逐步向低层进行分发。如果处于上层的ViewGroup要对事件进行处理，首先要对事件进行拦截，然后再进行处理；如果不进行处理，那么需要把事件分发到底层的View或者ViewGroup。如果底层的View处理了事件，那么这个事件的生命周期就结束了，否则，这个事件还要沿着原路向上层传递。这时，上层ViewGroup可以选择对事件进行处理，或者继续向上层传递，直到事件被处理为止。</p><p>以上分析可以用下面的流程图来表示：</p><p><img src="/uploads/android/事件拦截机制.png" alt="事件拦截机制"></p><h1 id="事件处理的关键方法"><a href="#事件处理的关键方法" class="headerlink" title="事件处理的关键方法"></a>事件处理的关键方法</h1><p>当控件想要分发一个事件时，会调用dispatchTouchEvent()方法。如果返回true，表示控件完成了这个事件的分发工作；如果返回false，表示事件分发工作未完成，事件将交由上层控件处理。</p><p>当控件想要拦截一个事件时，会调用onInterceptTouchEvent()方法。只有ViewGroup才拥有该方法，因为父控件只能是ViewGroup。当父控件要对分发到子控件的事件进行处理时，就需要调用此方法，如果返回true，表示父控件拦截了这个事件；如果返回false，父控件不对事件进行拦截，将把事件分发到子控件。</p><p>当控件想要处理一个事件时，会调用onTouchEvent()方法。在这个方法中，可以根据MotionEvent类提供的信息做相应的操作。操作完毕后，如果返回true，表示事件被处理了，该事件就结束了；如果返回false，表示事件没有被处理，事件将交由上层控件，直到被处理为止。</p><p>下面使用时序图描述一个事件处理的实例：父控件将事件分发给控件，控件接着将事件分发给子控件，然而子控件没有处理事件，把事件返还给了控件，最后控件自己处理了这个事件。</p><p><img src="/uploads/android/事件处理.png" alt="事件处理"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在对控件进行测量、布局、绘制一系列工作后，想要让控件与用户进行交互，就需要涉及到Android的事件拦截机制。Android系统提供了一套完善的事件分发、拦截、处理机制，让控件能够对用户输入的事件进行准确的响应和处理。&lt;/p&gt;
&lt;h1 id=&quot;触摸事件&quot;&gt;&lt;a href=&quot;
      
    
    </summary>
    
      <category term="Android" scheme="http://yoursite.com/categories/Android/"/>
    
    
      <category term="自定义控件" scheme="http://yoursite.com/tags/%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8E%A7%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>自定义View和ViewGroup</title>
    <link href="http://yoursite.com/2017/12/20/%E8%87%AA%E5%AE%9A%E4%B9%89View%E5%92%8CViewGroup/"/>
    <id>http://yoursite.com/2017/12/20/自定义View和ViewGroup/</id>
    <published>2017-12-20T11:05:31.000Z</published>
    <updated>2017-12-20T11:25:04.264Z</updated>
    
    <content type="html"><![CDATA[<h1 id="自定义View"><a href="#自定义View" class="headerlink" title="自定义View"></a>自定义View</h1><p>在自定义View时，通常需要重写onDraw()方法绘制View的显示内容；如果需要使用wrap_content属性，还需要重写onMeasure()方法进行测量；另外，还可以在attrs.xml文件中为View自定义属性。</p><p>在View中通常用到的回调方法有：</p><ul><li><p>onFinishInflate()<br>从XML文件中加载控件后调用；</p></li><li><p>onSizeChanged()<br>控件大小改变时调用；</p></li><li><p>onMeasure()<br>测量控件大小时调用</p></li><li><p>onLayout()<br>确定控件显示位置时调用</p></li><li><p>onDraw()<br>绘制控件时调用；</p></li><li><p>onTouchEvent()<br>监听触摸事件时调用；</p></li></ul><p>在自定义View的时候，只需要重写特点条件的回调方法。</p><p>通常情况下，自定义View有三种方式：对现有View进行扩展、创建复合View、自定义新的View。</p><h2 id="对现有View进行扩展"><a href="#对现有View进行扩展" class="headerlink" title="对现有View进行扩展"></a>对现有View进行扩展</h2><p>这种方式是在原生View的基础上进行扩展，比如修改显示的效果、增加新的功能等。</p><p>通常可以在onDraw()方法中，对原生View进行扩展。</p><h2 id="创建复合View"><a href="#创建复合View" class="headerlink" title="创建复合View"></a>创建复合View</h2><p>这种方式通常需要继承一个合适的ViewGroup，再给它添加指定功能的控件，从而组合成新的复合View。</p><p>对于复合View，一般会给它指定一些自定义属性，让其具有更强的扩展性。</p><h2 id="自定义新的View"><a href="#自定义新的View" class="headerlink" title="自定义新的View"></a>自定义新的View</h2><p>当原生View无法满足需求时，可以通过继承View，自定义一个新的View。</p><p>自定义新的View，最重要的是绘制View和实现交互。绘制逻辑需要重写onDraw()和onMeasure()方法，交互逻辑需要重写onTouchEvent()等控制触控事件的方法。还可以像实现复合View那样，为新的View配置自定义属性，丰富自定义View的可定制性。</p><h1 id="自定义ViewGroup"><a href="#自定义ViewGroup" class="headerlink" title="自定义ViewGroup"></a>自定义ViewGroup</h1><p>ViewGroup用于管理一组子View，将子View放到合适的位置，并为其添加响应事件。</p><p>自定义ViewGroup通常需要重写onMeasure()方法对子View进行测量，重写onLayout()方法确定子View的位置，重写onTouchEvent()方法为子View设置响应事件。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;自定义View&quot;&gt;&lt;a href=&quot;#自定义View&quot; class=&quot;headerlink&quot; title=&quot;自定义View&quot;&gt;&lt;/a&gt;自定义View&lt;/h1&gt;&lt;p&gt;在自定义View时，通常需要重写onDraw()方法绘制View的显示内容；如果需要使用wrap_c
      
    
    </summary>
    
      <category term="Android" scheme="http://yoursite.com/categories/Android/"/>
    
    
      <category term="自定义控件" scheme="http://yoursite.com/tags/%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8E%A7%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>控件的测量和绘制</title>
    <link href="http://yoursite.com/2017/12/20/%E6%8E%A7%E4%BB%B6%E7%9A%84%E6%B5%8B%E9%87%8F%E5%92%8C%E7%BB%98%E5%88%B6/"/>
    <id>http://yoursite.com/2017/12/20/控件的测量和绘制/</id>
    <published>2017-12-20T06:54:17.000Z</published>
    <updated>2017-12-20T08:28:18.277Z</updated>
    
    <content type="html"><![CDATA[<h1 id="View的测量"><a href="#View的测量" class="headerlink" title="View的测量"></a>View的测量</h1><p>Android系统在绘制View前，要对View进行测量，告诉系统View的大小，这个过程是在View的onMeasure()方法中进行的。</p><p>具体测量View是通过MeasureSpec类，测量模式有一下三种：</p><ul><li><p>EXACTLY<br>当控件的layout_width和layout_height属性为具体数值，或者被指定为match_parent时，使用的就是该模式；</p></li><li><p>AT_MOST<br>当控件的layout_width和layout_height属性被指定为wrap_content时使用，这时控件的大小会随着子控件的大小变化，同时控件的尺寸不允许超过父控件的最大尺寸；</p></li><li><p>UNSPECIFIED<br>在这个模式下，View大小可以随意指定，通常在绘制自定义View的时候使用；</p></li></ul><p>MeasureSpec类除了指定View的测量模式外，还指定了对应测量模式下View的尺寸。</p><p>MeasureSpec是一个32位的int值，其中高2位为测量的模式，低30位为测量的大小，为了提高运算效率，具体获取模式和大小的时候使用位运算。</p><p>View的默认onMeasure()方法只支持EXACTLY模式，如果想让View支持wrap_content属性，需要重写onMeasure()方法，指定AT_MOST模式下View的大小。</p><h1 id="View的绘制"><a href="#View的绘制" class="headerlink" title="View的绘制"></a>View的绘制</h1><p>View测量完毕后，需要重写onDraw()方法，在其Canvas对象上使用Paint对象绘制所需的图形。可以把Canvas对象看作成一块画板，Paint对象看作画笔，然后在onDraw()方法中进行绘制操作。</p><p>调用Canvas的drawXXX()方法绘制图形、文字、图片等，对于复杂的控件，可以把其拆分为一个个小的图形单元分别绘制。</p><h1 id="ViewGroup的测量和布局"><a href="#ViewGroup的测量和布局" class="headerlink" title="ViewGroup的测量和布局"></a>ViewGroup的测量和布局</h1><p>ViewGroup在测量时，会遍历所有的子View，调用子View的measure()方法获取每个子View的测量结果，这时子View会调用onMeasure()方法进行测量。</p><p>当子View测量完毕后，还需要把子View放到合适的位置，这个过程就是View的布局过程。ViewGroup在执行布局过程时，同样会遍历调用子View的layout()方法，然后子View调用onLayout()方法进行具体的布局过程。</p><p>在自定义ViewGroup时，通常需要重写onLayout()方法来控制其子View的显示位置。类似于View，如果需要支持wrap_content属性，也需要重写onMeasure()方法。</p><h1 id="ViewGroup的绘制"><a href="#ViewGroup的绘制" class="headerlink" title="ViewGroup的绘制"></a>ViewGroup的绘制</h1><p>ViewGroup通常不需要绘制，因为其本身没有需要绘制的内容，如果不指定背景颜色，ViewGroup的onDraw()方法都不会被调用。但是，ViewGroup会使用dispatchDraw()方法来绘制其子View，这个过程也会遍历所有的子View，并调用子View的draw()方法完成绘制工作。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;View的测量&quot;&gt;&lt;a href=&quot;#View的测量&quot; class=&quot;headerlink&quot; title=&quot;View的测量&quot;&gt;&lt;/a&gt;View的测量&lt;/h1&gt;&lt;p&gt;Android系统在绘制View前，要对View进行测量，告诉系统View的大小，这个过程是在Vie
      
    
    </summary>
    
      <category term="Android" scheme="http://yoursite.com/categories/Android/"/>
    
    
      <category term="自定义控件" scheme="http://yoursite.com/tags/%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8E%A7%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>控件架构</title>
    <link href="http://yoursite.com/2017/12/18/%E6%8E%A7%E4%BB%B6%E6%9E%B6%E6%9E%84/"/>
    <id>http://yoursite.com/2017/12/18/控件架构/</id>
    <published>2017-12-18T08:02:09.000Z</published>
    <updated>2017-12-19T08:26:31.355Z</updated>
    
    <content type="html"><![CDATA[<h1 id="控件树"><a href="#控件树" class="headerlink" title="控件树"></a>控件树</h1><p>Android中的控件可以分为View控件和ViewGroup控件两类，一个ViewGroup控件可以包含多个View控件，这样就形式了一棵控件树：</p><p><img src="/uploads/android/控件树.png" alt="控件树"></p><p>控件树中的上层父控件负责下层子控件的测量和绘制，并且传递交互事件给子控件。</p><p>每个子控件都包含一个指向父控件的ViewParent对象，ViewParent对象专门负责管理与父控件的交互事件，从而对整个视图进行控制。</p><p>Activity中的findViewById()方法就是在控件树中，以DFS来查找对应的控件的。</p><h1 id="界面架构"><a href="#界面架构" class="headerlink" title="界面架构"></a>界面架构</h1><p>每个Activity都包含一个Window对象，具体由PhoneWindow实现，PhoneWindow将DecorView设置为Window的顶层View。</p><p>DecorView将屏幕分为：StatusBar、DecorContent、NavigationBar三部分，DecorContent又包含ActionBar和ContentView两部分。</p><p><img src="/uploads/android/界面架构.png" alt="界面架构"></p><p>Activity就是通过setContentView()方法将布局内容加载到ContentView中的。</p><p>从界面架构图可以看出，ActionBar和ContentView都是在DecorView中进行绘制的，如果使用requestWindowFeature()方法设置全屏显示，那么需要在setContentView()方法调用之前进行。</p><h1 id="视图树"><a href="#视图树" class="headerlink" title="视图树"></a>视图树</h1><p>通过AS的Layout Inspector工具，可以直观的看到一棵标准的视图树：</p><p><img src="/uploads/android/视图树.png" alt="视图树"></p><p>视图树中的结构和上面描述的界面架构基本上能够对应上，只是多了一个action_mode_bar_stub，这个ViewStub对象主要用于绘制ActionMode状态下的ActionBar区域。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;控件树&quot;&gt;&lt;a href=&quot;#控件树&quot; class=&quot;headerlink&quot; title=&quot;控件树&quot;&gt;&lt;/a&gt;控件树&lt;/h1&gt;&lt;p&gt;Android中的控件可以分为View控件和ViewGroup控件两类，一个ViewGroup控件可以包含多个View控件，这样就形
      
    
    </summary>
    
      <category term="Android" scheme="http://yoursite.com/categories/Android/"/>
    
    
      <category term="自定义控件" scheme="http://yoursite.com/tags/%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8E%A7%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>搭建个人博客</title>
    <link href="http://yoursite.com/2017/11/23/%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"/>
    <id>http://yoursite.com/2017/11/23/搭建个人博客/</id>
    <published>2017-11-23T04:00:00.000Z</published>
    <updated>2017-12-03T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>在网上浏览技术文章的时候，经常看到有人把文章发布到自己的个人博客上，感觉挺高端的，在查阅了相关资料后，也搭建了自己的个人博客，这篇文章就是我搭建个人博客的总结。</p><p><strong>注意</strong></p><blockquote><p>本文主要是针对Windows环境，在Mac环境除了软件安装方式和命令有所区别外，其它基本一样。</p></blockquote><h1 id="创建域名和空间"><a href="#创建域名和空间" class="headerlink" title="创建域名和空间"></a>创建域名和空间</h1><h2 id="创建GitHub域名"><a href="#创建GitHub域名" class="headerlink" title="创建GitHub域名"></a>创建GitHub域名</h2><p>博客是托管在<a href="https://github.com" target="_blank" rel="noopener">GitHub</a>上的，首先要注册GitHub账号，注册的时候注意<strong>username</strong>，因为GitHub域名将是<em>username.github.io</em>，注册完毕后，GitHub域名也就创建了。</p><h2 id="创建Blog存储空间"><a href="#创建Blog存储空间" class="headerlink" title="创建Blog存储空间"></a>创建Blog存储空间</h2><p>Blog本质是一个网站，那么需要一个空间去存储网站的内容，这里使用GitHub的仓库(Repository)存储网站的内容，所以，需要在GitHub上创建一个仓库，Repository name就用上一步创建的域名：<em>username.github.io</em>，仓库创建完毕后，Blog存储空间也就创建了。</p><h1 id="安装必要的工具"><a href="#安装必要的工具" class="headerlink" title="安装必要的工具"></a>安装必要的工具</h1><p><a href="https://hexo.io/zh-cn/" target="_blank" rel="noopener">Hexo</a>是目前比较流行的博客框架，基于Node.js，可以使用 Markdown解析文章。要使用Hexo，需要安装Git，Node.js，Hexo工具。</p><h2 id="安装Git"><a href="#安装Git" class="headerlink" title="安装Git"></a>安装Git</h2><p>Git用于把Hexo生成的本地网站内容提交到GitHub上，可以去<a href="https://git-scm.com/" target="_blank" rel="noopener">Git官网</a>下载安装程序进行安装，安装完毕后，需要在GitHub上配置SSH keys，具体配置方式可以参考<a href="https://help.github.com/articles/connecting-to-github-with-ssh/" target="_blank" rel="noopener">Connecting to GitHub with SSH</a>。</p><h2 id="安装Node-js"><a href="#安装Node-js" class="headerlink" title="安装Node.js"></a>安装Node.js</h2><p>Node.js是Hexo的运行环境，可以去<a href="https://nodejs.org/zh-cn/" target="_blank" rel="noopener">Node.js官网</a>下载安装程序进行安装，安装过程中，注意勾选<strong>Add to PATH</strong>选项。</p><h2 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h2><p>在Git和Node.js安装完毕后，可在Git Bash中使用npm安装Hexo，由于Hexo的很多操作都涉及到命令行，可以考虑始终使用Git Bash来进行操作。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install -g hexo-cli</span><br></pre></td></tr></table></figure><h1 id="创建网站和配置"><a href="#创建网站和配置" class="headerlink" title="创建网站和配置"></a>创建网站和配置</h1><p>Hexo安装完毕后，接下来利用Hexo创建一个网站，并进行一些基本的配置。</p><h2 id="创建网站"><a href="#创建网站" class="headerlink" title="创建网站"></a>创建网站</h2><p>执行下列命令，Hexo 将会在指定文件夹中新建所需要的文件。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ hexo init &lt;folder&gt;</span><br><span class="line">$ <span class="built_in">cd</span> &lt;folder&gt;</span><br><span class="line">$ npm install</span><br></pre></td></tr></table></figure><h2 id="基本配置"><a href="#基本配置" class="headerlink" title="基本配置"></a>基本配置</h2><p>配置信息在网站的<em>_config.yml</em>文件中，可以根据需要进行配置，记得保存，<strong>注意配置的键值之间一定要有空格</strong>。</p><h3 id="网站配置"><a href="#网站配置" class="headerlink" title="网站配置"></a>网站配置</h3><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>title</td><td>网站标题</td></tr><tr><td>subtitle</td><td>网站副标题</td></tr><tr><td>description</td><td>网站描述</td></tr><tr><td>author</td><td>你的名字</td></tr><tr><td>language</td><td>网站使用的语言</td></tr><tr><td>timezone</td><td>网站时区</td></tr></tbody></table><p>其中，description主要用于SEO，告诉搜索引擎一个关于您站点的简单描述，通常建议在其中包含您网站的关键词。author参数用于主题显示文章的作者。下面附上我自己的配置，以供参考：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># Site</span><br><span class="line">title: Zhou Zejin&apos;s Home</span><br><span class="line">subtitle: 想象力比知识更重要！</span><br><span class="line">description: Sunny的个人Blog，主要记录Android学习总结，欢迎交流~</span><br><span class="line">author: Zhou Zejin</span><br><span class="line">language: zh-Hans</span><br><span class="line">timezone:</span><br></pre></td></tr></table></figure><p>其它配置可以参考<a href="https://hexo.io/zh-cn/docs/configuration.html" target="_blank" rel="noopener">更多配置</a>。</p><h3 id="部署配置"><a href="#部署配置" class="headerlink" title="部署配置"></a>部署配置</h3><p>这里只讲述Git的部署配置，其它方式的部署配置参考<a href="https://hexo.io/zh-cn/docs/deployment.html" target="_blank" rel="noopener">部署配置</a>。</p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>repo</td><td>库(Repository)地址</td></tr><tr><td>branch</td><td>分支名称</td></tr><tr><td>message</td><td>自定义提交信息</td></tr></tbody></table><p>下面是我的部署配置：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># Deployment</span><br><span class="line">## Docs: https://hexo.io/docs/deployment.html</span><br><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: git@github.com:zhouzejin/zhouzejin.github.io.git</span><br></pre></td></tr></table></figure><h1 id="工作流程"><a href="#工作流程" class="headerlink" title="工作流程"></a>工作流程</h1><p>网站创建和配置完毕后，接着就可以撰写博客，并进行发布了。</p><h2 id="新建"><a href="#新建" class="headerlink" title="新建"></a>新建</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new [layout] &lt;title&gt;</span><br></pre></td></tr></table></figure><p>如果没有设置 layout 的话，默认使用<em>_config.yml</em>中的 default_layout 参数代替。如果标题包含空格，要使用引号括起来。</p><p>创建的文章在<em>username.github.io/source/_posts</em>目录下，默认是Markdown文件，在具体撰写博客前，可以学习一下Markdown语法。</p><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>启动本地服务器。默认情况下，访问网址为： <a href="http://localhost:4000/" target="_blank" rel="noopener">http://localhost:4000/</a></p><table><thead><tr><th>选项</th><th>描述</th></tr></thead><tbody><tr><td>-p, –port</td><td>重设端口</td></tr><tr><td>-s, –static</td><td>只使用静态文件</td></tr><tr><td>-l, –log</td><td>启动日记记录，使用覆盖记录格式</td></tr></tbody></table><p><strong>注意</strong></p><blockquote><p>上述方式如果无法启动Server，很大可能是默认端口4000被占用，可以更换其它端口重新启动</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server -p 5000</span><br></pre></td></tr></table></figure><p>服务器启动后，就可以浏览文章的排版和效果，如果不满意，可以直接修改文章对应的Markdown文件，修改完毕后，直接刷新就可以看到修改后的效果，不必重启Server。</p><h2 id="发布"><a href="#发布" class="headerlink" title="发布"></a>发布</h2><p>使用Git发布需要先安装hexo-deployer-git插件（更多插件使用可以参考<a href="https://hexo.io/plugins/" target="_blank" rel="noopener">Hexo插件</a>）：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><p>发布前先要生成网站的静态文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>生成完毕后就可以进行发布：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>生成和发布操作可以使用一个命令完成：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo d -g</span><br></pre></td></tr></table></figure><p>发布成功后，在浏览器输入<em>username.github.io</em>就可以进行访问了。</p><p><strong>注意</strong></p><blockquote><p>在某些情况（尤其是更换主题后），如果发现对网站的更改无论如何也不生效，可以使用clean命令清除缓存文件(db.json)和已生成的静态文件(public)，然后再进行发布。</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo clean</span><br></pre></td></tr></table></figure><p>Hexo的更多使用可以参考<a href="https://hexo.io/zh-cn/docs/" target="_blank" rel="noopener">Hexo官网文档</a></p><h1 id="自定义主题"><a href="#自定义主题" class="headerlink" title="自定义主题"></a>自定义主题</h1><p>经过以上步骤，个人博客就搭建完毕了，但是为让自己的博客更美观，可以更换默认主题，这里使用现在比较流行的<a href="https://github.com/iissnan/hexo-theme-next" target="_blank" rel="noopener">NexT主题</a>，如果需要使用其它主题，可以参考<a href="https://hexo.io/themes/" target="_blank" rel="noopener">Hexo主题</a>。</p><p>下面只对我自己用到的主题配置和第三方服务进行总结，更多配置和服务可以参考<a href="http://theme-next.iissnan.com/" target="_blank" rel="noopener">NexT使用文档</a>。</p><h2 id="主题安装"><a href="#主题安装" class="headerlink" title="主题安装"></a>主题安装</h2><h3 id="下载主题"><a href="#下载主题" class="headerlink" title="下载主题"></a>下载主题</h3><p>在终端窗口下，定位到Hexo站点目录下。使用Git checkout代码：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> your-hexo-site</span><br><span class="line">$ git <span class="built_in">clone</span> https://github.com/iissnan/hexo-theme-next themes/next</span><br></pre></td></tr></table></figure><h3 id="启用主题"><a href="#启用主题" class="headerlink" title="启用主题"></a>启用主题</h3><p>在网站的<em>_config.yml</em>文件中，找到<strong>theme</strong>字段，并将其值更改为<strong>next</strong>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># Extensions</span><br><span class="line">## Plugins: https://hexo.io/plugins/</span><br><span class="line">## Themes: https://hexo.io/themes/</span><br><span class="line">theme: next</span><br></pre></td></tr></table></figure><h2 id="主题配置"><a href="#主题配置" class="headerlink" title="主题配置"></a>主题配置</h2><p>如果没有特殊说明，主题的配置都是在主题的<em>_config.yml</em>文件中进行的。</p><h3 id="菜单配置"><a href="#菜单配置" class="headerlink" title="菜单配置"></a>菜单配置</h3><p>每个菜单项目的配置都是类似的，接下来以配置about菜单进行说明：</p><ul><li>在终端窗口下，定位到Hexo站点目录，创建一个名为about的页面</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new page <span class="string">"about"</span></span><br></pre></td></tr></table></figure><ul><li>编辑分类页, 设置页面类型为about</li></ul><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">title: 关于</span><br><span class="line">date: 2017-11-24 16:00:52</span><br><span class="line">type: "about"</span><br></pre></td></tr></table></figure><ul><li>添加about到主题配置文件中menu字段下</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">menu:</span><br><span class="line">  home: / || home</span><br><span class="line">  categories: /categories/ || th</span><br><span class="line">  tags: /tags/ || tags</span><br><span class="line">  archives: /archives/ || archive</span><br><span class="line">  about: /about/ || user</span><br><span class="line">  #schedule: /schedule/ || calendar</span><br><span class="line">  #sitemap: /sitemap.xml || sitemap</span><br><span class="line">  #commonweal: /404/ || heartbeat</span><br></pre></td></tr></table></figure><p>配置完categories和tags菜单后，可以参考<a href="https://hexo.io/zh-cn/docs/front-matter.html" target="_blank" rel="noopener">Hexo的Front-matter文档</a>为文章添加分类和标签。</p><h3 id="侧边栏配置"><a href="#侧边栏配置" class="headerlink" title="侧边栏配置"></a>侧边栏配置</h3><ul><li>在移动设备上显示侧边栏</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># Enable sidebar on narrow view (only for Muse | Mist).</span><br><span class="line">onmobile: true</span><br></pre></td></tr></table></figure><ul><li>设置头像</li></ul><p>将头像放在网站目录下的<em>source/uploads/</em>路径，若uploads目录不存在则新建，然后在主题配置文件中进行如下配置：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># Sidebar Avatar</span><br><span class="line"># in theme directory(source/images): /images/avatar.gif</span><br><span class="line"># in site  directory(source/uploads): /uploads/avatar.gif</span><br><span class="line">avatar: /uploads/Sanji.jpg</span><br></pre></td></tr></table></figure><ul><li>添加社交链接</li></ul><p>在主题配置文件下的social字段下，添加相应的社交链接即可：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># Social links</span><br><span class="line">social:</span><br><span class="line">  GitHub: https://github.com/your-user-name</span><br><span class="line">  Twitter: https://twitter.com/your-user-name</span><br><span class="line">  微博: http://weibo.com/your-user-name</span><br><span class="line">  豆瓣: http://douban.com/people/your-user-name</span><br><span class="line">  知乎: http://www.zhihu.com/people/your-user-name</span><br><span class="line">  # 等等</span><br></pre></td></tr></table></figure><h3 id="RSS配置"><a href="#RSS配置" class="headerlink" title="RSS配置"></a>RSS配置</h3><p>安装<a href="https://github.com/hexojs/hexo-generator-feed" target="_blank" rel="noopener">hexo-generator-feed</a>插件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-generator-feed --save</span><br></pre></td></tr></table></figure><p>安装成功后，就可以在侧边栏看到RSS订阅的标识了。</p><h3 id="开启打赏功能"><a href="#开启打赏功能" class="headerlink" title="开启打赏功能"></a>开启打赏功能</h3><p>只需要主题配置文件中填入<em>微信</em>和<em>支付宝</em>收款二维码图片地址即可开启该功能：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">reward_comment: 坚持原创技术分享，您的支持将鼓励我继续创作！</span><br><span class="line">wechatpay: /path/to/wechat-reward-image</span><br><span class="line">alipay: /path/to/alipay-reward-image</span><br></pre></td></tr></table></figure><h3 id="网站footer个性化显示"><a href="#网站footer个性化显示" class="headerlink" title="网站footer个性化显示"></a>网站footer个性化显示</h3><p>如果想自定义网站底部的信息，可以在主题配置文件进行如下配置：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">footer:</span><br><span class="line">  # Specify the date when the site was setup.</span><br><span class="line">  # If not defined, current year will be used.</span><br><span class="line">  since: 2017</span><br><span class="line"></span><br><span class="line">  # Icon between year and copyright info.</span><br><span class="line">  icon: user</span><br><span class="line"></span><br><span class="line">  # If not defined, will be used `author` from Hexo main config.</span><br><span class="line">  copyright:</span><br><span class="line">  # -------------------------------------------------------------</span><br><span class="line">  # Hexo link (Powered by Hexo).</span><br><span class="line">  powered: true</span><br><span class="line"></span><br><span class="line">  theme:</span><br><span class="line">    # Theme &amp; scheme info link (Theme - NexT.scheme).</span><br><span class="line">    enable: true</span><br><span class="line">    # Version info of NexT after scheme info (vX.X.X).</span><br><span class="line">    version: false</span><br></pre></td></tr></table></figure><h3 id="设置「阅读全文」"><a href="#设置「阅读全文」" class="headerlink" title="设置「阅读全文」"></a>设置「阅读全文」</h3><p>在主题配置文件中添加：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">auto_excerpt:</span><br><span class="line">  enable: true</span><br><span class="line">  length: 150</span><br></pre></td></tr></table></figure><p>默认截取的长度为 150 字符，可以根据需要自行设定。</p><h2 id="第三方服务"><a href="#第三方服务" class="headerlink" title="第三方服务"></a>第三方服务</h2><p>可以为主题添加一些第三方服务来丰富网站的功能。</p><h3 id="内容分享服务"><a href="#内容分享服务" class="headerlink" title="内容分享服务"></a>内容分享服务</h3><p>编辑主题配置文件，添加字段jiathis，值为true：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># JiaThis 分享服务</span><br><span class="line">jiathis: true</span><br></pre></td></tr></table></figure><h3 id="搜索服务"><a href="#搜索服务" class="headerlink" title="搜索服务"></a>搜索服务</h3><ul><li>安装hexo-generator-searchdb插件</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-generator-searchdb --save</span><br></pre></td></tr></table></figure><ul><li>编辑<strong>站点配置文件</strong>，新增以下内容到任意位置</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">search:</span><br><span class="line">  path: search.xml</span><br><span class="line">  field: post</span><br><span class="line">  format: html</span><br><span class="line">  limit: 10000</span><br></pre></td></tr></table></figure><ul><li>编辑<strong>主题配置文件</strong>，启用本地搜索功能</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># Local search</span><br><span class="line">local_search:</span><br><span class="line">  enable: true</span><br></pre></td></tr></table></figure><blockquote><p>参考资料</p></blockquote><p><a href="http://www.jianshu.com/p/4eaddcbe4d12" target="_blank" rel="noopener">5分钟 搭建免费个人博客</a><br><a href="https://hexo.io/zh-cn/" target="_blank" rel="noopener">Hexo官方文档</a><br><a href="http://theme-next.iissnan.com/" target="_blank" rel="noopener">NexT使用文档</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在网上浏览技术文章的时候，经常看到有人把文章发布到自己的个人博客上，感觉挺高端的，在查阅了相关资料后，也搭建了自己的个人博客，这篇文章就是我搭建个人博客的总结。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;注意&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;本文主要是针对Wi
      
    
    </summary>
    
      <category term="方法和经验" scheme="http://yoursite.com/categories/%E6%96%B9%E6%B3%95%E5%92%8C%E7%BB%8F%E9%AA%8C/"/>
    
    
      <category term="项目经验" scheme="http://yoursite.com/tags/%E9%A1%B9%E7%9B%AE%E7%BB%8F%E9%AA%8C/"/>
    
  </entry>
  
</feed>
